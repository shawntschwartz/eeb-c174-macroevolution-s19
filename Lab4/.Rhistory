library(colordistancve)
library(colordistance)
install.packages("colordistance")
install.packages("pavo")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
getKMeanColors("~/Dropbox/machine_learning_fishes/randall/Scaridae/Chlorurus_Chlorurus gibbus_-1128176173.jpg", lower=c(0, 0, 0), upper=c(0.2, 0.2, 0.2))
img
source('~/.active-rstudio-document', echo=TRUE)
img
image_transparent(img, 'white')
print(image_transparent(img, 'white'))
source('~/.active-rstudio-document', echo=TRUE)
test
source('~/.active-rstudio-document', echo=TRUE)
?getKMeanColors
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install_github?
install_github?
install_github\
install_github
install.packages("devtools")
install_github
# define paths
base.dir <- "/Users/shawn/Developer/chaetodontidae_analysis/chaetodontidae_pilot/"
base.url <- "/"
fig.path <- "images/Chaetodontidae/"
# this is where figures will be sent
paste0(base.dir, fig.path)
library(dplyr)
pca_k3 <- select(fish_adj_tbl_k_3, rowname, m_r, m_c, Sc, St, A)
# define paths
base.dir <- "/Users/shawn/Developer/chaetodontidae_analysis/chaetodontidae_pilot/"
base.url <- "/"
fig.path <- "images/Chaetodontidae/"
# this is where figures will be sent
paste0(base.dir, fig.path)
library(dplyr)
pca_k3 <- select(fish_adj_tbl_k_3, rowname, m_r, m_c, Sc, St, A)
# define paths
base.dir <- "/Users/shawn/Developer/chaetodontidae_analysis/chaetodontidae_pilot/"
base.url <- "/"
fig.path <- "images/Chaetodontidae/"
# this is where figures will be sent
paste0(base.dir, fig.path)
library(dplyr)
pca_k3 <- select(fish_adj_tbl_k_3, rowname, m_r, m_c, Sc, St, A)
# define paths
base.dir <- "/Users/shawn/Developer/chaetodontidae_analysis/chaetodontidae_pilot/"
base.url <- "/"
fig.path <- "images/Chaetodontidae/"
# this is where figures will be sent
paste0(base.dir, fig.path)
library(dplyr)
pca_k3 <- select(fish_adj_tbl_k_3, rowname, m_r, m_c, Sc, St, A)
# define paths
base.dir <- "/Users/shawn/Developer/chaetodontidae_analysis/chaetodontidae_pilot/"
base.url <- "/"
fig.path <- "images/Chaetodontidae/"
# this is where figures will be sent
paste0(base.dir, fig.path)
library(dplyr)
pca_k3 <- select(fish_adj_tbl_k_3, rowname, m_r, m_c, Sc, St, A)
# define paths
base.dir <- "/Users/shawn/Developer/chaetodontidae_analysis/chaetodontidae_pilot/"
base.url <- "/"
fig.path <- "images/Chaetodontidae/"
# this is where figures will be sent
paste0(base.dir, fig.path)
library(dplyr)
pca_k3 <- select(fish_adj_tbl_k_3, rowname, m_r, m_c, Sc, St, A)
pavo
library.install(pavo)
packages.install("pavo")
package.install("pavo")
install.packages("pavo")
# define paths
base.dir <- "/Users/shawn/Developer/chaetodontidae_analysis/chaetodontidae_pilot/"
base.url <- "/"
fig.path <- "images/Chaetodontidae/"
# this is where figures will be sent
paste0(base.dir, fig.path)
library(dplyr)
pca_k3 <- select(fish_adj_tbl_k_3, rowname, m_r, m_c, Sc, St, A)
libary(sos)
library("sos")
install.packages("sos")
# define paths
base.dir <- "/Users/shawn/Developer/chaetodontidae_analysis/chaetodontidae_pilot/"
base.url <- "/"
fig.path <- "images/Chaetodontidae/"
# this is where figures will be sent
paste0(base.dir, fig.path)
library(dplyr)
pca_k3 <- select(fish_adj_tbl_k_3, rowname, m_r, m_c, Sc, St, A)
install.packages("rmarkdown")
# define paths
base.dir <- "/Users/shawn/Developer/chaetodontidae_analysis/chaetodontidae_pilot/"
base.url <- "/"
fig.path <- "images/Chaetodontidae/"
# this is where figures will be sent
paste0(base.dir, fig.path)
library(dplyr)
pca_k3 <- select(fish_adj_tbl_k_3, rowname, m_r, m_c, Sc, St, A)
# define paths
base.dir <- "/Users/shawn/Developer/chaetodontidae_analysis/chaetodontidae_pilot/"
base.url <- "/"
fig.path <- "images/Chaetodontidae/"
# this is where figures will be sent
paste0(base.dir, fig.path)
library(dplyr)
pca_k3 <- select(fish_adj_tbl_k_3, rowname, m_r, m_c, Sc, St, A)
# define paths
base.dir <- "/Users/shawn/Developer/chaetodontidae_analysis/chaetodontidae_pilot/"
base.url <- "/"
fig.path <- "images/Chaetodontidae/"
# this is where figures will be sent
paste0(base.dir, fig.path)
library(dplyr)
pca_k3 <- select(fish_adj_tbl_k_3, rowname, m_r, m_c, Sc, St, A)
# define paths
base.dir <- "/Users/shawn/Developer/chaetodontidae_analysis/chaetodontidae_pilot/"
base.url <- "/"
fig.path <- "images/Chaetodontidae/"
# this is where figures will be sent
paste0(base.dir, fig.path)
library(dplyr)
pca_k3 <- select(fish_adj_tbl_k_3, rowname, m_r, m_c, Sc, St, A)
# define paths
base.dir <- "/Users/shawn/Developer/chaetodontidae_analysis/chaetodontidae_pilot/"
base.url <- "/"
fig.path <- "images/Chaetodontidae/"
# this is where figures will be sent
paste0(base.dir, fig.path)
rmarkdown?
d
?rmarkdown
render("12-28-2018-analyses-sschwartz.Rmd", html_document())
render
renderMarkdown
markdown::renderMarkdown("~/Developer/chaetodontidae_analysis/chaetodontidae_pilot/12-28-2018-analyses-sschwartz.Rmd", html_document())
setwd("/Users/shawn/Developer/chaetodontidae_analysis/chaetodontidae_pilot/")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("stargazer")
library(stargazer)
stargazer(cars)
knitr::opts_chunk$set(echo = TRUE)
library(stargazer)
library(stringr)
library(tidyverse)
setwd("~/Dropbox/ICB_Chaet_paper_2019")
#read in adjacency statistics
adj_stats_path <- "/Users/shawn/Dropbox/ICB_Chaet_paper_2019/1-28-2019-analyses_files/fish_adjacency_stats_table.csv"
adj_stats<- read.table(adj_stats_path, sep = ",", header=T, as.is=F)
adj_stats$name <- as.character(adj_stats$name)
#need to create a new column that is just the genus_species for table
str_split(adj_stats$name, "_")
adj_stats %>% separate(name, c(NA, "genus", "species", NA),sep = "_", remove = F) ->adj_stats
adj_stats$genus <- substr(adj_stats$genus, 0, 1)
adj_stats %>%
unite('species', c(genus, species)) -> adj_stats
setwd("~/Dropbox/ICB_Chaet_paper_2019")
#read in adjacency statistics
adj_stats_path <- "/Users/shawn/Dropbox/ICB_Chaet_paper_2019/1-28-2019-analyses_files/fish_adjacency_stats_table.csv"
adj_stats<- read.table(adj_stats_path, sep = ",", header=T, as.is=F)
adj_stats$name <- as.character(adj_stats$name)
#need to create a new column that is just the genus_species for table
str_split(adj_stats$name, "_")
adj_stats %>% separate(name, c(NA, "genus", "species", NA),sep = "_", remove = F) ->adj_stats
adj_stats$genus <- substr(adj_stats$genus, 0, 1)
adj_stats$binomial <- paste(adj_stats$genus, adj_stats$species, sep="_")
image_paths <- str_c("/Users/shawn/Dropbox/ICB_Chaet_paper_2019/images/curated_images/", adj_stats$name, ".png")
adj_stats$image_paths <- image_paths
knitter_path <- sprintf('![](%s){width=25%%}', image_paths)
adj_stats$knitter_path <-  knitter_path
select(adj_stats, knitter_path, species,m) %>% arrange(desc(m)) -> m_sorted
adj_stats
View(adj_stats)
View(adj_stats)
knitr::opts_chunk$set(echo = TRUE)
library(stargazer)
library(stringr)
library(tidyverse)
library(dplyr)
setwd("~/Dropbox/ICB_Chaet_paper_2019")
#read in adjacency statistics
adj_stats_path <- "/Users/shawn/Dropbox/ICB_Chaet_paper_2019/1-28-2019-analyses_files/fish_adjacency_stats_table.csv"
adj_stats<- read.table(adj_stats_path, sep = ",", header=T, as.is=F)
adj_stats$name <- as.character(adj_stats$name)
#need to create a new column that is just the genus_species for table
str_split(adj_stats$name, "_")
adj_stats %>% separate(name, c(NA, "genus", "species", NA),sep = "_", remove = F) ->adj_stats
adj_stats$genus <- substr(adj_stats$genus, 0, 1)
adj_stats$binomial <- paste(adj_stats$genus, adj_stats$species, sep="_")
image_paths <- str_c("/Users/shawn/Dropbox/ICB_Chaet_paper_2019/images/curated_images/", adj_stats$name, ".png")
adj_stats$image_paths <- image_paths
knitter_path <- sprintf('![](%s){width=25%%}', image_paths)
adj_stats$knitter_path <-  knitter_path
select(adj_stats, knitter_path, species,m) %>% arrange(desc(m)) -> m_sorted
View(adj_stats)
View(adj_stats)
names(adj_stats)[2] <- "Full.Genus"
names(adj_stats)[5] <- "ID"
select(adj_stats, knitter_path, species,m) %>% arrange(desc(m)) -> m_sorted
select(adj_stats, knitter_path, species,A) %>% arrange(desc(A)) -> A_sorted
select(adj_stats, knitter_path, species,Jc) %>% arrange(desc(Jc)) -> Jc_sorted
select(adj_stats, knitter_path, species,Jt) %>% arrange(desc(Jt)) -> Jt_sorted
select(adj_stats, knitter_path, species,m_dS) %>% arrange(desc(m_dS)) -> mS_sorted
select(adj_stats, knitter_path, species, m_dL) %>% arrange(desc(m_dL)) -> mL_sorted
m_sorted
select(adj_stats, knitter_path, binomial,m) %>% arrange(desc(m)) -> m_sorted
m_sorted
select(adj_stats, knitter_path, binomial,m) %>% arrange(desc(m)) -> m_sorted
select(adj_stats, knitter_path, binomial,A) %>% arrange(desc(A)) -> A_sorted
select(adj_stats, knitter_path, binomial,Jc) %>% arrange(desc(Jc)) -> Jc_sorted
select(adj_stats, knitter_path, binomial,Jt) %>% arrange(desc(Jt)) -> Jt_sorted
select(adj_stats, knitter_path, binomial,m_dS) %>% arrange(desc(m_dS)) -> mS_sorted
select(adj_stats, knitter_path, binomial, m_dL) %>% arrange(desc(m_dL)) -> mL_sorted
bind_cols(m_sorted, A_sorted, Jc_sorted, Jt_sorted) -> sorted_patterns
sorted_patterns
View(sorted_patterns)
View(sorted_patterns)
cols_to_plot <- list(m_sorted, A_sorted, Jc_sorted, Jt_sorted, mS_sorted, mL_sorted)
cols_to_plot
View(cols_to_plot)
View(cols_to_plot)
knitr::kable(cols_to_plot[1])
knitter_path
install.packages("magrittr")
install.packages("magrittr")
install.packages("magrittr")
install.packages("flextable")
knitr::opts_chunk$set(echo = TRUE)
library(stargazer)
library(stringr)
library(tidyverse)
library(dplyr)
library(flextable)
library(magrittr)
#test table
cols_to_plot[1] %>% autofit() %>%
width(j=~knitter_path, width = 1) %>% width(j=~binomial, width = 1) %>% width(j=~m, width = 1)
library(kableExtra)
library(flextable)
library(magrittr)
library(kableExtra)
#test table
cols_to_plot[1] %>% autofit() %>%
width(j=~knitter_path, width = 1) %>% width(j=~binomial, width = 1) %>% width(j=~m, width = 1)
knitr::kable(cols_to_plot[1], "html") %>%
kable_styling(full_width = F)
knitr::opts_chunk$set(echo = TRUE)
library(stargazer)
library(stringr)
library(tidyverse)
library(dplyr)
library(flextable)
library(magrittr)
library(kableExtra)
knitr::kable(cols_to_plot[1], format = "html", tabble.attr = "style='width:30%;'")
library(stargazer)
library(stringr)
library(tidyverse)
library(dplyr)
library(flextable)
library(magrittr)
library(kableExtra)
setwd("~/Dropbox/ICB_Chaet_paper_2019")
#read in adjacency statistics
adj_stats_path <- "/Users/shawn/Dropbox/ICB_Chaet_paper_2019/appendix_tables/fish_adjacency_stats_table_roa-mod.csv"
adj_stats<- read.table(adj_stats_path, sep = ",", header=T, as.is=F)
adj_stats$name <- as.character(adj_stats$name)
#need to create a new column that is just the genus_species for table
str_split(adj_stats$name, "_")
adj_stats %>% separate(name, c(NA, "genus", "species", NA),sep = "_", remove = F) ->adj_stats
adj_stats$genus <- substr(adj_stats$genus, 0, 1)
adj_stats$binomial <- paste(adj_stats$genus, adj_stats$species, sep="_")
image_paths <- str_c("/Users/shawn/Dropbox/ICB_Chaet_paper_2019/images/curated_images/", adj_stats$name, ".png")
adj_stats$image_paths <- image_paths
knitter_path <- sprintf('![](%s){width=25%%}', image_paths)
adj_stats$knitter_path <-  knitter_path
names(adj_stats)[2] <- "Full.Genus"
names(adj_stats)[5] <- "ID"
select(adj_stats, knitter_path, binomial,m) %>% arrange(desc(m)) -> m_sorted
select(adj_stats, knitter_path, binomial,A) %>% arrange(desc(A)) -> A_sorted
select(adj_stats, knitter_path, binomial,Jc) %>% arrange(desc(Jc)) -> Jc_sorted
select(adj_stats, knitter_path, binomial,Jt) %>% arrange(desc(Jt)) -> Jt_sorted
select(adj_stats, knitter_path, binomial,m_dS) %>% arrange(desc(m_dS)) -> mS_sorted
select(adj_stats, knitter_path, binomial, m_dL) %>% arrange(desc(m_dL)) -> mL_sorted
bind_cols(m_sorted, A_sorted, Jc_sorted, Jt_sorted) -> sorted_patterns
cols_to_plot <- list(m_sorted, A_sorted, Jc_sorted, Jt_sorted, mS_sorted, mL_sorted)
knitr::kable(cols_to_plot[1], format = "html", tabble.attr = "style='width:30%;'")
install.packages("cars")
install.packages("car")
?.car
??car
source('~/Developer/EEB-C174-Labs/Lab3/lab_three_class.R', echo=TRUE)
source('~/Developer/EEB-C174-Labs/Lab3/lab_three_class.R', echo=TRUE)
rm(list=ls())
#imports
library(ape)
library(phytools)
library(car)
#### Simulating Browninan Motion ####
# Setting up our parameters
sig2 <- 0.01 #sigma^2
n_steps <- 1:100 #number of steps (time)
# Fill a vector with a bunch of small steps
vec <- numeric(100) #going to fill this with each time step
for (i in n_steps)
{
small_step <- rnorm(n = 1, sd = sqrt(sig2))
vec[i + 1] <- vec[i] + small_step
}
plot(n_steps, vec[1:100], type = "1", ylim = c(-2, 2), ylab = "x", xlab = "t")
{
small_step <- rnorm(n = 1, sd = sqrt(sig2))
vec[i + 1] <- vec[i] + small_step
}
plot(n_steps, vec[1:100], type = "1", ylim = c(-2, 2), ylab = "x", xlab = "t")
source('~/Developer/EEB-C174-Labs/Lab3/lab_three_class.R', echo=TRUE)
plot(n_steps, vec[1:100], type = "1", ylim = c(-2, 2), ylab = "x", xlab = "t")
install.packages("phylolm")
rm(list=ls())
#imports
library(phytools)
library(geiger)
library(phylolm)
cwd <- "~/Developer/EEB-C174-Labs/Lab4"
setwd(cwd)
#import tree
tree <- read.tree("resources/lab4_part1_tree.tre")
plot(tree, show.tip.label = F)
rm(list=ls())
#imports
library(phytools)
library(geiger)
library(phylolm)
cwd <- "~/Developer/EEB-C174-Labs/Lab4"
setwd(cwd)
#import tree
tree <- read.tree("resources/lab4_part1_tree.tre")
plot(tree, show.tip.label = F)
#### Simulate Data Under Several Different Models ####
# Simulate traits under a Brownian Motion Model
data1 <- rTrait(phy = tree, model = "BM", parameters = list(ancestral.state = 0, sigma2 = 0.1))
# Simulate traits under an Ornstein-Uhlenbeck Model
data2 <- rTrait(phy = tree, model = "OU", parameters = list(ancestral.state = 0, sigma2 = 0.1, optimal.value = 10, alpha = 0.001))
# Simulate traits under an Early Burst Model
data3 <- rTrait(phy = tree, model = "EB", parameters = list(ancestral.state = 0, sigma2 = 0.1, rate = -0.0001))
# Simulate traits under a White Noise Model
data4 <- rnorm(n = length(tree$tip.label), mean = 0, sd = exp(1))
names(data4) <- tree$tip.label #Need to give names to the data4 vector, since rTrait() already does that for us
# TO visualize the data
cbind(data1, data2, data3, data4)
#### Model Fitting ####
# Fit models to data1 (BM)
data1.bm <- fitContinuous(phy = tree, dat = data1, model = "BM")
data1.ou <- fitContinuous(phy = tree, dat = data1, model = "OU")
data1.eb <- fitContinuous(phy = tree, dat = data1, model = "EB")
data1.wn <- fitContinuous(phy = tree, dat = data1, model = "white")
# Fit models to data2 (OU)
data2.bm <- fitContinuous(phy = tree, dat = data2, model = "BM")
data2.ou <- fitContinuous(phy = tree, dat = data2, model = "OU")
data2.eb <- fitContinuous(phy = tree, dat = data2, model = "EB")
data2.wn <- fitContinuous(phy = tree, dat = data2, model = "white")
# Fit models to data3 (EB)
data3.bm <- fitContinuous(phy = tree, dat = data3, model = "BM")
data3.ou <- fitContinuous(phy = tree, dat = data3, model = "OU")
data3.eb <- fitContinuous(phy = tree, dat = data3, model = "EB")
data3.wn <- fitContinuous(phy = tree, dat = data3, model = "white")
# Fit models to data4 (WN)
data4.bm <- fitContinuous(phy = tree, dat = data4, model = "BM")
data4.ou <- fitContinuous(phy = tree, dat = data4, model = "OU")
data4.eb <- fitContinuous(phy = tree, dat = data4, model = "EB")
data4.wn <- fitContinuous(phy = tree, dat = data4, model = "white")
#### Compare Results Using AIC ####
# AIC = 2k-2ln(L)
#Make a matrix of all the AIC scores
BM.Data <- c(data1.bm$opt$aic, data1.ou$opt$aic, data1.eb$opt$aic, data1.wn$opt$aic)
OU.Data <- c(data2.bm$opt$aic, data2.ou$opt$aic, data2.eb$opt$aic, data2.wn$opt$aic)
EB.Data <- c(data3.bm$opt$aic, data3.ou$opt$aic, data3.eb$opt$aic, data3.wn$opt$aic)
WN.Data <- c(data4.bm$opt$aic, data4.ou$opt$aic, data4.eb$opt$aic, data4.wn$opt$aic)
AICresults <- rbind(BM.Data, OU.Data, EB.Data, WN.Data)
colnames(AICresults) <- c("Brownian Motion", "Ornstein-Uhlenbeck", "Early Burst", "White Nosie")
rownames(AICresults) <- c("From BM", "From OU", "From EB", "From WN")
AICresults
#nsmi = number of null simulations that you want (the cloud that you see: they simulate these null distributions with the idea being that your dtt falling different from the null cloud (to see how different the disparity of your clade is compared to some null))
ddt1 <- dtt(phy = tree, data = data1, nsim = 100, index = c("resources/avg.sq"), plot = TRUE)
#nsmi = number of null simulations that you want (the cloud that you see: they simulate these null distributions with the idea being that your dtt falling different from the null cloud (to see how different the disparity of your clade is compared to some null))
ddt1 <- dtt(phy = tree, data = data1, nsim = 100, index = c("avg.sq"), plot = TRUE)
title("Brownian Motion")
ddt2 <- dtt(phy = tree, data = data2, nsim = 100, index = c("avg.sq"), plot = TRUE)
title("Ornstein Uhlenbeck")
ddt3 <- ddt(phy = tree, data = data3, nsim = 100, index = c("avg.sq"), plot = TRUE)
ddt3 <- dtt(phy = tree, data = data3, nsim = 100, index = c("avg.sq"), plot = TRUE)
title("Early Burst")
#### Inferring Mode of Trait Evolution ####
#Now try to infer the node of trait evolution on an unknown dataset
lab4_tree <- read.tree("resources/lab4_tree.tre")
lab4_data <- read.csv("resources/lab4_trait_data.csv", stringsAsFactors = F)
head(lab4_data)
lab4_tree
plot(lab4_tree, show.tip.label = F)
#Question: What is interesting about this tree?
#Answer: Something interesting about this tree is that it has some extinct fossils (tips that don't go all the way to the end)
#Thus,
# Remove the extinct tips
extant_only_lab4_tree <- drop.extinct(lab4_tree)
plot(extant_only_lab4_tree, show.tip.label = F)
# Pull out the trait value column and name it
trait_values <- lab4_data$trait_value
names(trait_values) <- lab4_data$X
head(trait_values)
# Extract the trait data for only the living species
extant_only_trait_values <- trait_values[intersect(names(trait_values), extant_only_lab4_tree$tip.label)]
length(extant_only_trait_values) #Should be 100 to match the number of extant species within the tree after pruning the extinct species from the tree
# Fit models to extant only tree
extant.bm <- fitContinuous(phy = extant_only_lab4_tree, dat = extant_only_trait_values, model = "BM")
extant.ou <- fitContinuous(phy = extant_only_lab4_tree, dat = extant_only_trait_values, model = "OU")
extant.eb <- fitContinuous(phy = extant_only_lab4_tree, dat = extant_only_trait_values, model = "EB")
extant.wn <- fitContinuous(phy = extant_only_lab4_tree, dat = extant_only_trait_values, model = "white")
# Fit models to total tree
total.bm <- fitContinuous(phy = lab4_tree, dat = trait_values, model = "BM")
total.ou <- fitContinuous(phy = lab4_tree, dat = trait_values, model = "OU")
total.eb <- fitContinuous(phy = lab4_tree, dat = trait_values, model = "EB")
total.wn <- fitContinuous(phy = lab4_tree, dat = trait_values, model = "white")
trait_values
Extant.Data <- c(extant.bm$opt$aic, extant.ou$opt$aic, extant.eb$opt$aic, extant.wn$opt$aic)
Total.Data <- c(total.bm$opt$aic, total.ou$opt$aic, total.eb$opt$aic, total.wn$opt$aic)
AIC_results <- rbind(Extant.Data, Total.Data)
colnames(AIC_results) <- c("Brownian Motion", "Orstein Uhlenbeck", "Early Burst", "White Noise")
rownames(AIC_results) <- c("From BM", "From OU", "From EB", "From WN")
AIC_results
colnames(AIC_results) <- c("Brownian Motion", "Orstein Uhlenbeck", "Early Burst", "White Noise")
AIC_results
# Transform AIC values into Akaike weights, which can be interpreted as conditional probabilities for each model
#NOTE: a way of comparing AIC scores to each other (they have to add up to one:-> making them conditional probabilities)
Extant_aicw <- aicw(Extant.Data)
Total_aicw <- aicw(Total.Data)
par(mfrow = c(2,1))
barplot(Extant_aicw[,3], names.arg = c("Brownian Motion", "Ornstein Uhlenbeck", "Early Burst", "White Noise"), ylim = c(0,1), main = "Extant Only", cex.names = 0.7)
abline(h = 1, lty = "dashed") #makes a dashed line at height 1 (y = 1)
barplot(Total_aicw[,3], names.arg = c("Brownian Motion", "Ornstein Uhlenbeck", "Early Burst", "White Noise"), ylim = c(0,1), main = "Total", cex.names = 0.7)
abline(h = 1, lty = "dashed") #makes a dashed line at height 1 (y = 1)
