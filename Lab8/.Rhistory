source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install_github?
install_github?
install_github\
install_github
install.packages("devtools")
install_github
# define paths
base.dir <- "/Users/shawn/Developer/chaetodontidae_analysis/chaetodontidae_pilot/"
base.url <- "/"
fig.path <- "images/Chaetodontidae/"
# this is where figures will be sent
paste0(base.dir, fig.path)
library(dplyr)
pca_k3 <- select(fish_adj_tbl_k_3, rowname, m_r, m_c, Sc, St, A)
# define paths
base.dir <- "/Users/shawn/Developer/chaetodontidae_analysis/chaetodontidae_pilot/"
base.url <- "/"
fig.path <- "images/Chaetodontidae/"
# this is where figures will be sent
paste0(base.dir, fig.path)
library(dplyr)
pca_k3 <- select(fish_adj_tbl_k_3, rowname, m_r, m_c, Sc, St, A)
# define paths
base.dir <- "/Users/shawn/Developer/chaetodontidae_analysis/chaetodontidae_pilot/"
base.url <- "/"
fig.path <- "images/Chaetodontidae/"
# this is where figures will be sent
paste0(base.dir, fig.path)
library(dplyr)
pca_k3 <- select(fish_adj_tbl_k_3, rowname, m_r, m_c, Sc, St, A)
# define paths
base.dir <- "/Users/shawn/Developer/chaetodontidae_analysis/chaetodontidae_pilot/"
base.url <- "/"
fig.path <- "images/Chaetodontidae/"
# this is where figures will be sent
paste0(base.dir, fig.path)
library(dplyr)
pca_k3 <- select(fish_adj_tbl_k_3, rowname, m_r, m_c, Sc, St, A)
# define paths
base.dir <- "/Users/shawn/Developer/chaetodontidae_analysis/chaetodontidae_pilot/"
base.url <- "/"
fig.path <- "images/Chaetodontidae/"
# this is where figures will be sent
paste0(base.dir, fig.path)
library(dplyr)
pca_k3 <- select(fish_adj_tbl_k_3, rowname, m_r, m_c, Sc, St, A)
# define paths
base.dir <- "/Users/shawn/Developer/chaetodontidae_analysis/chaetodontidae_pilot/"
base.url <- "/"
fig.path <- "images/Chaetodontidae/"
# this is where figures will be sent
paste0(base.dir, fig.path)
library(dplyr)
pca_k3 <- select(fish_adj_tbl_k_3, rowname, m_r, m_c, Sc, St, A)
pavo
library.install(pavo)
packages.install("pavo")
package.install("pavo")
install.packages("pavo")
# define paths
base.dir <- "/Users/shawn/Developer/chaetodontidae_analysis/chaetodontidae_pilot/"
base.url <- "/"
fig.path <- "images/Chaetodontidae/"
# this is where figures will be sent
paste0(base.dir, fig.path)
library(dplyr)
pca_k3 <- select(fish_adj_tbl_k_3, rowname, m_r, m_c, Sc, St, A)
libary(sos)
library("sos")
install.packages("sos")
# define paths
base.dir <- "/Users/shawn/Developer/chaetodontidae_analysis/chaetodontidae_pilot/"
base.url <- "/"
fig.path <- "images/Chaetodontidae/"
# this is where figures will be sent
paste0(base.dir, fig.path)
library(dplyr)
pca_k3 <- select(fish_adj_tbl_k_3, rowname, m_r, m_c, Sc, St, A)
install.packages("rmarkdown")
# define paths
base.dir <- "/Users/shawn/Developer/chaetodontidae_analysis/chaetodontidae_pilot/"
base.url <- "/"
fig.path <- "images/Chaetodontidae/"
# this is where figures will be sent
paste0(base.dir, fig.path)
library(dplyr)
pca_k3 <- select(fish_adj_tbl_k_3, rowname, m_r, m_c, Sc, St, A)
# define paths
base.dir <- "/Users/shawn/Developer/chaetodontidae_analysis/chaetodontidae_pilot/"
base.url <- "/"
fig.path <- "images/Chaetodontidae/"
# this is where figures will be sent
paste0(base.dir, fig.path)
library(dplyr)
pca_k3 <- select(fish_adj_tbl_k_3, rowname, m_r, m_c, Sc, St, A)
# define paths
base.dir <- "/Users/shawn/Developer/chaetodontidae_analysis/chaetodontidae_pilot/"
base.url <- "/"
fig.path <- "images/Chaetodontidae/"
# this is where figures will be sent
paste0(base.dir, fig.path)
library(dplyr)
pca_k3 <- select(fish_adj_tbl_k_3, rowname, m_r, m_c, Sc, St, A)
# define paths
base.dir <- "/Users/shawn/Developer/chaetodontidae_analysis/chaetodontidae_pilot/"
base.url <- "/"
fig.path <- "images/Chaetodontidae/"
# this is where figures will be sent
paste0(base.dir, fig.path)
library(dplyr)
pca_k3 <- select(fish_adj_tbl_k_3, rowname, m_r, m_c, Sc, St, A)
# define paths
base.dir <- "/Users/shawn/Developer/chaetodontidae_analysis/chaetodontidae_pilot/"
base.url <- "/"
fig.path <- "images/Chaetodontidae/"
# this is where figures will be sent
paste0(base.dir, fig.path)
rmarkdown?
d
?rmarkdown
render("12-28-2018-analyses-sschwartz.Rmd", html_document())
render
renderMarkdown
markdown::renderMarkdown("~/Developer/chaetodontidae_analysis/chaetodontidae_pilot/12-28-2018-analyses-sschwartz.Rmd", html_document())
setwd("/Users/shawn/Developer/chaetodontidae_analysis/chaetodontidae_pilot/")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("stargazer")
library(stargazer)
stargazer(cars)
knitr::opts_chunk$set(echo = TRUE)
library(stargazer)
library(stringr)
library(tidyverse)
setwd("~/Dropbox/ICB_Chaet_paper_2019")
#read in adjacency statistics
adj_stats_path <- "/Users/shawn/Dropbox/ICB_Chaet_paper_2019/1-28-2019-analyses_files/fish_adjacency_stats_table.csv"
adj_stats<- read.table(adj_stats_path, sep = ",", header=T, as.is=F)
adj_stats$name <- as.character(adj_stats$name)
#need to create a new column that is just the genus_species for table
str_split(adj_stats$name, "_")
adj_stats %>% separate(name, c(NA, "genus", "species", NA),sep = "_", remove = F) ->adj_stats
adj_stats$genus <- substr(adj_stats$genus, 0, 1)
adj_stats %>%
unite('species', c(genus, species)) -> adj_stats
setwd("~/Dropbox/ICB_Chaet_paper_2019")
#read in adjacency statistics
adj_stats_path <- "/Users/shawn/Dropbox/ICB_Chaet_paper_2019/1-28-2019-analyses_files/fish_adjacency_stats_table.csv"
adj_stats<- read.table(adj_stats_path, sep = ",", header=T, as.is=F)
adj_stats$name <- as.character(adj_stats$name)
#need to create a new column that is just the genus_species for table
str_split(adj_stats$name, "_")
adj_stats %>% separate(name, c(NA, "genus", "species", NA),sep = "_", remove = F) ->adj_stats
adj_stats$genus <- substr(adj_stats$genus, 0, 1)
adj_stats$binomial <- paste(adj_stats$genus, adj_stats$species, sep="_")
image_paths <- str_c("/Users/shawn/Dropbox/ICB_Chaet_paper_2019/images/curated_images/", adj_stats$name, ".png")
adj_stats$image_paths <- image_paths
knitter_path <- sprintf('![](%s){width=25%%}', image_paths)
adj_stats$knitter_path <-  knitter_path
select(adj_stats, knitter_path, species,m) %>% arrange(desc(m)) -> m_sorted
adj_stats
View(adj_stats)
View(adj_stats)
knitr::opts_chunk$set(echo = TRUE)
library(stargazer)
library(stringr)
library(tidyverse)
library(dplyr)
setwd("~/Dropbox/ICB_Chaet_paper_2019")
#read in adjacency statistics
adj_stats_path <- "/Users/shawn/Dropbox/ICB_Chaet_paper_2019/1-28-2019-analyses_files/fish_adjacency_stats_table.csv"
adj_stats<- read.table(adj_stats_path, sep = ",", header=T, as.is=F)
adj_stats$name <- as.character(adj_stats$name)
#need to create a new column that is just the genus_species for table
str_split(adj_stats$name, "_")
adj_stats %>% separate(name, c(NA, "genus", "species", NA),sep = "_", remove = F) ->adj_stats
adj_stats$genus <- substr(adj_stats$genus, 0, 1)
adj_stats$binomial <- paste(adj_stats$genus, adj_stats$species, sep="_")
image_paths <- str_c("/Users/shawn/Dropbox/ICB_Chaet_paper_2019/images/curated_images/", adj_stats$name, ".png")
adj_stats$image_paths <- image_paths
knitter_path <- sprintf('![](%s){width=25%%}', image_paths)
adj_stats$knitter_path <-  knitter_path
select(adj_stats, knitter_path, species,m) %>% arrange(desc(m)) -> m_sorted
View(adj_stats)
View(adj_stats)
names(adj_stats)[2] <- "Full.Genus"
names(adj_stats)[5] <- "ID"
select(adj_stats, knitter_path, species,m) %>% arrange(desc(m)) -> m_sorted
select(adj_stats, knitter_path, species,A) %>% arrange(desc(A)) -> A_sorted
select(adj_stats, knitter_path, species,Jc) %>% arrange(desc(Jc)) -> Jc_sorted
select(adj_stats, knitter_path, species,Jt) %>% arrange(desc(Jt)) -> Jt_sorted
select(adj_stats, knitter_path, species,m_dS) %>% arrange(desc(m_dS)) -> mS_sorted
select(adj_stats, knitter_path, species, m_dL) %>% arrange(desc(m_dL)) -> mL_sorted
m_sorted
select(adj_stats, knitter_path, binomial,m) %>% arrange(desc(m)) -> m_sorted
m_sorted
select(adj_stats, knitter_path, binomial,m) %>% arrange(desc(m)) -> m_sorted
select(adj_stats, knitter_path, binomial,A) %>% arrange(desc(A)) -> A_sorted
select(adj_stats, knitter_path, binomial,Jc) %>% arrange(desc(Jc)) -> Jc_sorted
select(adj_stats, knitter_path, binomial,Jt) %>% arrange(desc(Jt)) -> Jt_sorted
select(adj_stats, knitter_path, binomial,m_dS) %>% arrange(desc(m_dS)) -> mS_sorted
select(adj_stats, knitter_path, binomial, m_dL) %>% arrange(desc(m_dL)) -> mL_sorted
bind_cols(m_sorted, A_sorted, Jc_sorted, Jt_sorted) -> sorted_patterns
sorted_patterns
View(sorted_patterns)
View(sorted_patterns)
cols_to_plot <- list(m_sorted, A_sorted, Jc_sorted, Jt_sorted, mS_sorted, mL_sorted)
cols_to_plot
View(cols_to_plot)
View(cols_to_plot)
knitr::kable(cols_to_plot[1])
knitter_path
install.packages("magrittr")
install.packages("magrittr")
install.packages("magrittr")
install.packages("flextable")
knitr::opts_chunk$set(echo = TRUE)
library(stargazer)
library(stringr)
library(tidyverse)
library(dplyr)
library(flextable)
library(magrittr)
#test table
cols_to_plot[1] %>% autofit() %>%
width(j=~knitter_path, width = 1) %>% width(j=~binomial, width = 1) %>% width(j=~m, width = 1)
library(kableExtra)
library(flextable)
library(magrittr)
library(kableExtra)
#test table
cols_to_plot[1] %>% autofit() %>%
width(j=~knitter_path, width = 1) %>% width(j=~binomial, width = 1) %>% width(j=~m, width = 1)
knitr::kable(cols_to_plot[1], "html") %>%
kable_styling(full_width = F)
knitr::opts_chunk$set(echo = TRUE)
library(stargazer)
library(stringr)
library(tidyverse)
library(dplyr)
library(flextable)
library(magrittr)
library(kableExtra)
knitr::kable(cols_to_plot[1], format = "html", tabble.attr = "style='width:30%;'")
library(stargazer)
library(stringr)
library(tidyverse)
library(dplyr)
library(flextable)
library(magrittr)
library(kableExtra)
setwd("~/Dropbox/ICB_Chaet_paper_2019")
#read in adjacency statistics
adj_stats_path <- "/Users/shawn/Dropbox/ICB_Chaet_paper_2019/appendix_tables/fish_adjacency_stats_table_roa-mod.csv"
adj_stats<- read.table(adj_stats_path, sep = ",", header=T, as.is=F)
adj_stats$name <- as.character(adj_stats$name)
#need to create a new column that is just the genus_species for table
str_split(adj_stats$name, "_")
adj_stats %>% separate(name, c(NA, "genus", "species", NA),sep = "_", remove = F) ->adj_stats
adj_stats$genus <- substr(adj_stats$genus, 0, 1)
adj_stats$binomial <- paste(adj_stats$genus, adj_stats$species, sep="_")
image_paths <- str_c("/Users/shawn/Dropbox/ICB_Chaet_paper_2019/images/curated_images/", adj_stats$name, ".png")
adj_stats$image_paths <- image_paths
knitter_path <- sprintf('![](%s){width=25%%}', image_paths)
adj_stats$knitter_path <-  knitter_path
names(adj_stats)[2] <- "Full.Genus"
names(adj_stats)[5] <- "ID"
select(adj_stats, knitter_path, binomial,m) %>% arrange(desc(m)) -> m_sorted
select(adj_stats, knitter_path, binomial,A) %>% arrange(desc(A)) -> A_sorted
select(adj_stats, knitter_path, binomial,Jc) %>% arrange(desc(Jc)) -> Jc_sorted
select(adj_stats, knitter_path, binomial,Jt) %>% arrange(desc(Jt)) -> Jt_sorted
select(adj_stats, knitter_path, binomial,m_dS) %>% arrange(desc(m_dS)) -> mS_sorted
select(adj_stats, knitter_path, binomial, m_dL) %>% arrange(desc(m_dL)) -> mL_sorted
bind_cols(m_sorted, A_sorted, Jc_sorted, Jt_sorted) -> sorted_patterns
cols_to_plot <- list(m_sorted, A_sorted, Jc_sorted, Jt_sorted, mS_sorted, mL_sorted)
knitr::kable(cols_to_plot[1], format = "html", tabble.attr = "style='width:30%;'")
install.packages("cars")
install.packages("car")
?.car
??car
source('~/Developer/EEB-C174-Labs/Lab3/lab_three_class.R', echo=TRUE)
source('~/Developer/EEB-C174-Labs/Lab3/lab_three_class.R', echo=TRUE)
rm(list=ls())
#imports
library(ape)
library(phytools)
library(car)
#### Simulating Browninan Motion ####
# Setting up our parameters
sig2 <- 0.01 #sigma^2
n_steps <- 1:100 #number of steps (time)
# Fill a vector with a bunch of small steps
vec <- numeric(100) #going to fill this with each time step
for (i in n_steps)
{
small_step <- rnorm(n = 1, sd = sqrt(sig2))
vec[i + 1] <- vec[i] + small_step
}
plot(n_steps, vec[1:100], type = "1", ylim = c(-2, 2), ylab = "x", xlab = "t")
{
small_step <- rnorm(n = 1, sd = sqrt(sig2))
vec[i + 1] <- vec[i] + small_step
}
plot(n_steps, vec[1:100], type = "1", ylim = c(-2, 2), ylab = "x", xlab = "t")
source('~/Developer/EEB-C174-Labs/Lab3/lab_three_class.R', echo=TRUE)
plot(n_steps, vec[1:100], type = "1", ylim = c(-2, 2), ylab = "x", xlab = "t")
source('~/Developer/EEB-C174-Labs/lab_eight_class.R', echo=TRUE)
bamm_run_path <- "BAMM_Run/"
tree <- read.tree(paste0(bamm_run_path,"primatetree.tre"))
tree <- read.tree(paste0(bamm_run_path,"primatetree.tre"))
tree <- ladderize(tree)
is.ultrametric(tree)
is.binary(tree)
min(tree$edge.length)
min(tree$edge.length) > 0
tree <- read.tree(paste0(bamm_run_path,"primatetree.tre"))
tree <- ladderize(tree)
axisPhylo()
plot(x = tree, cex = 0.2, no.margin = T)
axisPhylo()
#check bamm assumptions
is.ultrametric(tree)
is.binary(tree)
min(tree$edge.length) > 0
#generate bamm control file
# estimate priors and create control files
priors <- setBAMMpriors(phy = tree, traits = "primates_logmass.txt", outfile = NULL) generateControlFile(file = "controlfile.txt", type = "trait", params = list(
treefile = "primatetree.tre",
traitfile = "primates_logmass.txt",
seed = sample(1:1000000, 1),
overwrite = "0", # Does not allow for overwrite expectedNumberOfShifts = "30",
betaInitPrior = as.numeric(priors["betaInitPrior"]), betaShiftPrior = as.numeric(priors["betaShiftPrior"]), numberOfGenerations = "90000000",
mcmcWriteFreq = "30000",
eventDataWriteFreq = "30000",
printFreq = "30000",
acceptanceResetFreq = "30000",
outName = "classwork",
numberOfChains = "8")) # set to number of CPUs
source('~/Developer/EEB-C174-Labs/lab_eight_class.R', echo=TRUE)
#imports
library(BAMMtools)
library(coda)
cwd <- "~/Developer/EEB-C174-Labs/Lab8/BAMM_Run"
setwd(cwd)
resources_path <- "resources/"
output_path <- "output/"
rm(list=ls())
#imports
library(BAMMtools)
library(coda)
cwd <- "~/Developer/EEB-C174-Labs/Lab8/BAMM_Run"
setwd(cwd)
resources_path <- "resources/"
output_path <- "output/"
tree <- read.tree("primatetree.tre")
tree <- ladderize(tree)
plot(x = tree, cex = 0.2, no.margin = T)
axisPhylo()
#check bamm assumptions
is.ultrametric(tree)
is.binary(tree)
min(tree$edge.length) > 0
#generate bamm control file
# estimate priors and create control files
priors <- setBAMMpriors(phy = tree, traits = "primates_logmass.txt", outfile = NULL) generateControlFile(file = "controlfile.txt", type = "trait", params = list(
treefile = "primatetree.tre",
traitfile = "primates_logmass.txt",
seed = sample(1:1000000, 1),
overwrite = "0", # Does not allow for overwrite expectedNumberOfShifts = "30",
betaInitPrior = as.numeric(priors["betaInitPrior"]), betaShiftPrior = as.numeric(priors["betaShiftPrior"]), numberOfGenerations = "90000000",
mcmcWriteFreq = "30000",
eventDataWriteFreq = "30000",
printFreq = "30000",
acceptanceResetFreq = "30000",
outName = "classwork",
numberOfChains = "8")) # set to number of CPUs
#generate bamm control file
# estimate priors and create control files
priors <- setBAMMpriors(phy = tree, traits = "primates_logmass.txt", outfile = NULL)
generateControlFile(file = "controlfile.txt", type = "trait", params = list(
treefile = "primatetree.tre",
traitfile = "primates_logmass.txt",
seed = sample(1:1000000, 1),
overwrite = "0",
expectedNumberOfShifts = "30",
betaInitPrior = as.numeric(priors["betaInitPrior"]),
betaShiftPrior = as.numeric(priors["betaShiftPrior"]),
numberOfGenerations = "90000000",
mcmcWriteFreq = "30000",
eventDataWriteFreq = "30000",
printFreq = "30000",
acceptanceResetFreq = "30000",
outName = "classwork",
numberOfChains = "8"
))
#### import BAMM results ####
edata <- getEventData(tree, eventdata = "classwork_event_data.txt", burnin = 0.1, type = "trait")
summary(edata)
summary(edata)
#### check quality of BAMM results ####
mcmcout <- read.csv("classwork_mcmc_out.txt")
plot(mcmcout$logLik ~ mcmcout$generation)
plot(mcmcout$logLik ~ mcmcout$generation)
burnstart <- floor(0.1 * nrow(mcmcout)) # Discard the first 10% of samples as burnin
postburn <- mcmcout[burnstart:nrow(mcmcout), ]
effectiveSize(postburn$N_shifts)
effectiveSize(postburn$logLik)
effectiveSize(postburn$N_shifts)
effectiveSize(postburn$logLik)
#### analyze BAMM results with BAMMtools
plotPrior("classwork_mcmc_out.text", expectedNumberOfShifts = 30)
#### analyze BAMM results with BAMMtools
plotPrior("classwork_mcmc_out.txt", expectedNumberOfShifts = 30)
#analysis of rates
##phylorate plot displays model-averaged rates of trait evolution (i.e., Brownian rate parameter) on branches of your tree
s <- plot.bammdata(edata, labels = T, font = 3, cex = 0.1, logcolor = T)
title(main = "Mean phenotypic rate", sub = "time before present")
addBAMMlegend(s, location = "left", nTicks = 1)
axisPhylo()
css <- credibleShiftSet(edata, expectedNumberOfShifts = 30, threshold = 5, set.limit = 0.95)
css$number.distinct
summary(css)
sss <- plot.credibleshiftset(css, border = F, logcolor = T)
plot.new()
best <- getBestShiftConfiguration(edata, expectedNumberOfShifts = 30)
ss <- plot.bammdata(best, labels = T, font = 3, cex = 0.1, logcolor = T)
best <- getBestShiftConfiguration(edata, expectedNumberOfShifts = 30)
ss <- plot.bammdata(best, labels = T, font = 3, cex = 0.1, logcolor = T)
title(main = "Best shift configuration", sub = "time before present")
addBAMMlegend(ss, location = "left", nTicks = 1)
addBAMMshifts(best, cex = 3, pch = 1)
axisPhylo()
css$number.distinct
#analysis of rates
##phylorate plot displays model-averaged rates of trait evolution (i.e., Brownian rate parameter) on branches of your tree
s <- plot.bammdata(edata, labels = T, font = 3, cex = 0.1, logcolor = T)
title(main = "Mean phenotypic rate", sub = "time before present")
addBAMMlegend(s, location = "left", nTicks = 1)
axisPhylo()
css <- credibleShiftSet(edata, expectedNumberOfShifts = 30, threshold = 5, set.limit = 0.95)
css$number.distinct
summary(css)
sss <- plot.credibleshiftset(css, border = F, logcolor = T)
best <- getBestShiftConfiguration(edata, expectedNumberOfShifts = 30)
ss <- plot.bammdata(best, labels = T, font = 3, cex = 0.1, logcolor = T)
title(main = "Best shift configuration", sub = "time before present")
addBAMMlegend(ss, location = "left", nTicks = 1)
addBAMMshifts(best, cex = 3, pch = 1)
axisPhylo()
####Justification for sampling interval (3000 => less likely for autocorrelation vs 1000 having a higher chance of being correlated with one another)
#marginal probabilities tree (scaled)
par(font = 1)
marg_probs <- marginalShiftProbsTree(edata)
plot.phylo(marg_probs, cex = 0.2, no.margin = T)
title(sub = "Marginal shift probability")
add.scale.bar(x = 0.5, y = 0.5, font = 1)
#### rate through time analysis ####
###THIS PLOT WILL BE VERY USEFUL FOR INTERPRETING THE DATA###
plotRateThroughTime(edata,
ratetype = "auto",
avgCol = "black",
intervalCol = "gray80",
intervals = c(0.05, 0.95))
#### rate through time analysis ####
###THIS PLOT WILL BE VERY USEFUL FOR INTERPRETING THE DATA###
#questions: have changes in the environment through time impacted the diversification of my group
#example: Eocene (it got really hot in terms of the climate, and a lot of carnivores/animals got really small)
#we see that monkeys don't really care and they chug along through time and there isn't a big change in trait evolution
#so maybe this tells us that monkey trait evolution isn't really effected by the heat through time, but in fact might be decreasing their speciation rate with the global cooling event that has been occuring
#Thus, you can correlate these with known geological events that were occuring through time (questions that can be asked with rate through time plots)
#asteroid killed everything over 1 KG (KT extinction)
plotRateThroughTime(edata,
ratetype = "auto",
avgCol = "black",
intervalCol = "gray80",
intervals = c(0.05, 0.95),
opacity = 1)
edata
install.packages("")
install.packages("diversitree")
#FiSSE
library(ape)
library(phangorn)
library(diversitree)
source_path <- "source/"
source(paste0(source_path,"traitDependent_functions.R")) # functions for FiSSE method
labeight_dir <- "~/Developer/EEB-C174-Labs/Lab8"
setwd(labeight_dir)
source(paste0(source_path,"traitDependent_functions.R")) # functions for FiSSE method
example_tree <- read.tree(paste0(source_path,"example_tree.tre"))
example_tree <- ladderize(example_tree)
xx <- read.csv(paste0(source_path,"example_trait.csv"), header = F)
traits <- xx$V2
names(traits) <- xx$V1
traits
traits <- traits[example_tree$tip.label]
#plot tree with trait labels on tips
colvec <- rep("white", length(traits))
colvec[traits == 1] <- "black"
plot.phylo(example_tree, show.tip.label = F, no.margin = T)
tiplabels(pch = 21, bg = colvec, cex = 0.6)
res <- FISSE.binary(example_tree, traits)
res
plot.phylo(example_tree, show.tip.label = F, no.margin = T, type = "fan")
tiplabels(pch = 21, bg = colvec, cex = 0.6)
res
#we want to take the other direction of the p-value test
pval_2tailed <- min(res$pval, 1 - res$pval) * 2
pval_2tailed
