adj_stats_path <- "/Users/shawn/Dropbox/ICB_Chaet_paper_2019/1-28-2019-analyses_files/fish_adjacency_stats_table.csv"
adj_stats<- read.table(adj_stats_path, sep = ",", header=T, as.is=F)
adj_stats$name <- as.character(adj_stats$name)
#need to create a new column that is just the genus_species for table
str_split(adj_stats$name, "_")
adj_stats %>% separate(name, c(NA, "genus", "species", NA),sep = "_", remove = F) ->adj_stats
adj_stats$genus <- substr(adj_stats$genus, 0, 1)
adj_stats %>%
unite('species', c(genus, species)) -> adj_stats
setwd("~/Dropbox/ICB_Chaet_paper_2019")
#read in adjacency statistics
adj_stats_path <- "/Users/shawn/Dropbox/ICB_Chaet_paper_2019/1-28-2019-analyses_files/fish_adjacency_stats_table.csv"
adj_stats<- read.table(adj_stats_path, sep = ",", header=T, as.is=F)
adj_stats$name <- as.character(adj_stats$name)
#need to create a new column that is just the genus_species for table
str_split(adj_stats$name, "_")
adj_stats %>% separate(name, c(NA, "genus", "species", NA),sep = "_", remove = F) ->adj_stats
adj_stats$genus <- substr(adj_stats$genus, 0, 1)
adj_stats$binomial <- paste(adj_stats$genus, adj_stats$species, sep="_")
image_paths <- str_c("/Users/shawn/Dropbox/ICB_Chaet_paper_2019/images/curated_images/", adj_stats$name, ".png")
adj_stats$image_paths <- image_paths
knitter_path <- sprintf('![](%s){width=25%%}', image_paths)
adj_stats$knitter_path <-  knitter_path
select(adj_stats, knitter_path, species,m) %>% arrange(desc(m)) -> m_sorted
adj_stats
View(adj_stats)
View(adj_stats)
knitr::opts_chunk$set(echo = TRUE)
library(stargazer)
library(stringr)
library(tidyverse)
library(dplyr)
setwd("~/Dropbox/ICB_Chaet_paper_2019")
#read in adjacency statistics
adj_stats_path <- "/Users/shawn/Dropbox/ICB_Chaet_paper_2019/1-28-2019-analyses_files/fish_adjacency_stats_table.csv"
adj_stats<- read.table(adj_stats_path, sep = ",", header=T, as.is=F)
adj_stats$name <- as.character(adj_stats$name)
#need to create a new column that is just the genus_species for table
str_split(adj_stats$name, "_")
adj_stats %>% separate(name, c(NA, "genus", "species", NA),sep = "_", remove = F) ->adj_stats
adj_stats$genus <- substr(adj_stats$genus, 0, 1)
adj_stats$binomial <- paste(adj_stats$genus, adj_stats$species, sep="_")
image_paths <- str_c("/Users/shawn/Dropbox/ICB_Chaet_paper_2019/images/curated_images/", adj_stats$name, ".png")
adj_stats$image_paths <- image_paths
knitter_path <- sprintf('![](%s){width=25%%}', image_paths)
adj_stats$knitter_path <-  knitter_path
select(adj_stats, knitter_path, species,m) %>% arrange(desc(m)) -> m_sorted
View(adj_stats)
View(adj_stats)
names(adj_stats)[2] <- "Full.Genus"
names(adj_stats)[5] <- "ID"
select(adj_stats, knitter_path, species,m) %>% arrange(desc(m)) -> m_sorted
select(adj_stats, knitter_path, species,A) %>% arrange(desc(A)) -> A_sorted
select(adj_stats, knitter_path, species,Jc) %>% arrange(desc(Jc)) -> Jc_sorted
select(adj_stats, knitter_path, species,Jt) %>% arrange(desc(Jt)) -> Jt_sorted
select(adj_stats, knitter_path, species,m_dS) %>% arrange(desc(m_dS)) -> mS_sorted
select(adj_stats, knitter_path, species, m_dL) %>% arrange(desc(m_dL)) -> mL_sorted
m_sorted
select(adj_stats, knitter_path, binomial,m) %>% arrange(desc(m)) -> m_sorted
m_sorted
select(adj_stats, knitter_path, binomial,m) %>% arrange(desc(m)) -> m_sorted
select(adj_stats, knitter_path, binomial,A) %>% arrange(desc(A)) -> A_sorted
select(adj_stats, knitter_path, binomial,Jc) %>% arrange(desc(Jc)) -> Jc_sorted
select(adj_stats, knitter_path, binomial,Jt) %>% arrange(desc(Jt)) -> Jt_sorted
select(adj_stats, knitter_path, binomial,m_dS) %>% arrange(desc(m_dS)) -> mS_sorted
select(adj_stats, knitter_path, binomial, m_dL) %>% arrange(desc(m_dL)) -> mL_sorted
bind_cols(m_sorted, A_sorted, Jc_sorted, Jt_sorted) -> sorted_patterns
sorted_patterns
View(sorted_patterns)
View(sorted_patterns)
cols_to_plot <- list(m_sorted, A_sorted, Jc_sorted, Jt_sorted, mS_sorted, mL_sorted)
cols_to_plot
View(cols_to_plot)
View(cols_to_plot)
knitr::kable(cols_to_plot[1])
knitter_path
install.packages("magrittr")
install.packages("magrittr")
install.packages("magrittr")
install.packages("flextable")
knitr::opts_chunk$set(echo = TRUE)
library(stargazer)
library(stringr)
library(tidyverse)
library(dplyr)
library(flextable)
library(magrittr)
#test table
cols_to_plot[1] %>% autofit() %>%
width(j=~knitter_path, width = 1) %>% width(j=~binomial, width = 1) %>% width(j=~m, width = 1)
library(kableExtra)
library(flextable)
library(magrittr)
library(kableExtra)
#test table
cols_to_plot[1] %>% autofit() %>%
width(j=~knitter_path, width = 1) %>% width(j=~binomial, width = 1) %>% width(j=~m, width = 1)
knitr::kable(cols_to_plot[1], "html") %>%
kable_styling(full_width = F)
knitr::opts_chunk$set(echo = TRUE)
library(stargazer)
library(stringr)
library(tidyverse)
library(dplyr)
library(flextable)
library(magrittr)
library(kableExtra)
knitr::kable(cols_to_plot[1], format = "html", tabble.attr = "style='width:30%;'")
library(stargazer)
library(stringr)
library(tidyverse)
library(dplyr)
library(flextable)
library(magrittr)
library(kableExtra)
setwd("~/Dropbox/ICB_Chaet_paper_2019")
#read in adjacency statistics
adj_stats_path <- "/Users/shawn/Dropbox/ICB_Chaet_paper_2019/appendix_tables/fish_adjacency_stats_table_roa-mod.csv"
adj_stats<- read.table(adj_stats_path, sep = ",", header=T, as.is=F)
adj_stats$name <- as.character(adj_stats$name)
#need to create a new column that is just the genus_species for table
str_split(adj_stats$name, "_")
adj_stats %>% separate(name, c(NA, "genus", "species", NA),sep = "_", remove = F) ->adj_stats
adj_stats$genus <- substr(adj_stats$genus, 0, 1)
adj_stats$binomial <- paste(adj_stats$genus, adj_stats$species, sep="_")
image_paths <- str_c("/Users/shawn/Dropbox/ICB_Chaet_paper_2019/images/curated_images/", adj_stats$name, ".png")
adj_stats$image_paths <- image_paths
knitter_path <- sprintf('![](%s){width=25%%}', image_paths)
adj_stats$knitter_path <-  knitter_path
names(adj_stats)[2] <- "Full.Genus"
names(adj_stats)[5] <- "ID"
select(adj_stats, knitter_path, binomial,m) %>% arrange(desc(m)) -> m_sorted
select(adj_stats, knitter_path, binomial,A) %>% arrange(desc(A)) -> A_sorted
select(adj_stats, knitter_path, binomial,Jc) %>% arrange(desc(Jc)) -> Jc_sorted
select(adj_stats, knitter_path, binomial,Jt) %>% arrange(desc(Jt)) -> Jt_sorted
select(adj_stats, knitter_path, binomial,m_dS) %>% arrange(desc(m_dS)) -> mS_sorted
select(adj_stats, knitter_path, binomial, m_dL) %>% arrange(desc(m_dL)) -> mL_sorted
bind_cols(m_sorted, A_sorted, Jc_sorted, Jt_sorted) -> sorted_patterns
cols_to_plot <- list(m_sorted, A_sorted, Jc_sorted, Jt_sorted, mS_sorted, mL_sorted)
knitr::kable(cols_to_plot[1], format = "html", tabble.attr = "style='width:30%;'")
install.packages("cars")
install.packages("car")
?.car
??car
source('~/Developer/EEB-C174-Labs/Lab3/lab_three_class.R', echo=TRUE)
source('~/Developer/EEB-C174-Labs/Lab3/lab_three_class.R', echo=TRUE)
rm(list=ls())
#imports
library(ape)
library(phytools)
library(car)
#### Simulating Browninan Motion ####
# Setting up our parameters
sig2 <- 0.01 #sigma^2
n_steps <- 1:100 #number of steps (time)
# Fill a vector with a bunch of small steps
vec <- numeric(100) #going to fill this with each time step
for (i in n_steps)
{
small_step <- rnorm(n = 1, sd = sqrt(sig2))
vec[i + 1] <- vec[i] + small_step
}
plot(n_steps, vec[1:100], type = "1", ylim = c(-2, 2), ylab = "x", xlab = "t")
{
small_step <- rnorm(n = 1, sd = sqrt(sig2))
vec[i + 1] <- vec[i] + small_step
}
plot(n_steps, vec[1:100], type = "1", ylim = c(-2, 2), ylab = "x", xlab = "t")
source('~/Developer/EEB-C174-Labs/Lab3/lab_three_class.R', echo=TRUE)
plot(n_steps, vec[1:100], type = "1", ylim = c(-2, 2), ylab = "x", xlab = "t")
rm(list=ls())
#imports
library(BAMMtools)
library(coda)
cwd <- "~/Developer/EEB-C174-Labs/Lab7/"
setwd(cwd)
resources_path <- "resources/"
output_path <- "output/"
tree <- read.tree(paste0(resources_path,"whaleTree.tre"))
plot(tree, cex = 0.7)
axisPhylo()
# Tree Must Be Ultrametric
is.ultrametric(tree)
# Tree Must Be Binary (all of the nodes need to lead to 2 branches, and no more than 2)
is.binary.tree(tree)
# Check to make sure all branch lengths are greater than 0
min(tree$edge.length)
#### Create BAMM Control File ####
#estimate priors and create control files
priors <- setBAMMpriors(tree, outfile = NULL)
priors
generateControlFile(file = paste0(resources_path,"whaleBAMMcontrolfile.txt"), params = list(
treefile = "whaleTree.tre",
globalSamplingFraction = "0.8", #This is 1 for complete sampling (for homework, put in a fraction like 0.8)
seed = sample(1:5000000, 1),
overwrite = "0",
expectedNumberOfShifts = "1",
lambdaInitPrior = as.numeric(priors["lambdaInitPrior"]),
lambdaShiftPrior = as.numeric(priors["lambdaShiftPrior"]),
muInitPrior = as.numeric(priors["muInitPrior"]),
numberOfGenerations = "5000000",
mcmcWriteFreq = "1000",
eventDataWriteFreq = "1000",
printFreq = "1000",
acceptanceResetFreq = "1000",
outName = "whaleBAMMhomeworkoutput",
##numberOfChains = "2", #set to the number of CPUs
numberOfChains = "4", #set to the number of CPUs
deltaT = "0.01"
))
labrid_tree <- read.tree(paste0(resources_path,"Labridae.tre"))
# Tree Must Be Ultrametric
is.ultrametric(labrid_tree)
# Tree Must Be Binary (all of the nodes need to lead to 2 branches, and no more than 2)
is.binary.tree(labrid_tree)
# Check to make sure all branch lengths are greater than 0
min(labrid_tree$edge.length)
force.ultrametric(labrid_tree, method=c("nnls","extend"))
library(phytools)
force.ultrametric(labrid_tree, method=c("nnls","extend"))
is.ultrametric(labrid_tree)
labrid_tree <- force.ultrametric(labrid_tree, method=c("nnls","extend"))
is.ultrametric(labrid_tree)
# Tree Must Be Binary (all of the nodes need to lead to 2 branches, and no more than 2)
is.binary.tree(labrid_tree)
# Check to make sure all branch lengths are greater than 0
min(labrid_tree$edge.length)
#### Create BAMM Control File ####
#estimate priors and create control files
labrid_priors <- setBAMMpriors(labrid_tree, outfile = NULL)
labrid_priors
generateControlFile(file = paste0(resources_path,"LABRIDBAMMcontrolfile.txt"), params = list(
treefile = "Labridae.tre",
globalSamplingFraction = "0.8", #This is 1 for complete sampling (for homework, put in a fraction like 0.8)
seed = sample(1:5000000, 1),
overwrite = "0",
expectedNumberOfShifts = "1",
lambdaInitPrior = as.numeric(priors["lambdaInitPrior"]),
lambdaShiftPrior = as.numeric(priors["lambdaShiftPrior"]),
muInitPrior = as.numeric(priors["muInitPrior"]),
numberOfGenerations = "5000000",
mcmcWriteFreq = "1000",
eventDataWriteFreq = "1000",
printFreq = "1000",
acceptanceResetFreq = "1000",
outName = "whaleBAMMhomeworkoutput",
##numberOfChains = "2", #set to the number of CPUs
numberOfChains = "4", #set to the number of CPUs
deltaT = "0.01"
))
generateControlFile(file = paste0(resources_path,"LABRIDBAMMcontrolfile.txt"), params = list(
treefile = "Labridae.tre",
globalSamplingFraction = "0.8", #This is 1 for complete sampling (for homework, put in a fraction like 0.8)
seed = sample(1:5000000, 1),
overwrite = "0",
expectedNumberOfShifts = "1",
lambdaInitPrior = as.numeric(priors["lambdaInitPrior"]),
lambdaShiftPrior = as.numeric(priors["lambdaShiftPrior"]),
muInitPrior = as.numeric(priors["muInitPrior"]),
numberOfGenerations = "5000000",
mcmcWriteFreq = "1000",
eventDataWriteFreq = "1000",
printFreq = "1000",
acceptanceResetFreq = "1000",
outName = "LABRIDBAMMhomeworkoutput",
##numberOfChains = "2", #set to the number of CPUs
numberOfChains = "4", #set to the number of CPUs
deltaT = "0.01"
))
plot(labrid_tree, cex = 0.3)
whale_data <- getEventData(tree, eventdata = "whaleBAMMhomeworkoutput_event_data.txt", burnin = 0.1)
whale_data <- getEventData(tree, eventdata = paste0(resources_path,"whaleBAMMhomeworkoutput_event_data.txt"), burnin = 0.1)
summary(whale_data)
#### check quality of BAMM results ####
mcmcout <- read.csv(paste0(resources_path,"whaleBAMMhomeworkoutput_mcmc_out.txt"))
plot(mcmcout$logLik ~ mcmcout$generation)
# test for convergence of the MCMC chains #
burnstart <- floor (0.1 * nrow(mcmcout))
burnstart
postburn <- mcmcout[burnstart:nrow(mcmcout), ]
effectiveSize(postburn$N_shifts)
effectiveSize(postburn$logLik)
computeBayesFactors(paste0(resources_path,"whaleBAMMhomeworkoutput_mcmc_out.txt"), expectedNumberOfShifts = 1, burnin = 0.1)
plotPrior(paste0(resources_path,"whaleBAMMhomeworkoutput_mcmc_out.txt"), expectedNumberOfShifts = 1)
summary
summary(whale_data)
s <- plot.bammdata(whale_data, spex = "s", labels = T, font = 3, cex = 0.5)
title(main = "Mean speciation rate", sub = "time before present")
addBAMMlegend(s, location = "topleft", nTicks = 1)
axisPhylo()
css <- credibleShiftSet(whale_data, expectedNumberOfShifts = 1, threshold = 5, set.limit = 0.95)
css$number.distinct
summary(css)
sss <- plot.credibleshiftset(css, border = F)
best <- getBestShiftConfiguration(whale_data, expectedNumberOfShifts = 1)
plot.new()
best <- getBestShiftConfiguration(whale_data, expectedNumberOfShifts = 1)
ss <- plot.bammdata(best, labels = T, font = 3, cex = 0.7)
plot.new()
par(mar(mfrow = c(1,1)))
parmfrow = c(1,1))
parmfrow = c(1,1)
ss <- plot.bammdata(best, labels = T, font = 3, cex = 0.7)
parmfrow = c(0,0)
ss <- plot.bammdata(best, labels = T, font = 3, cex = 0.7)
plot.new()
plot.new()
plot.new
plot.new()
ss <- plot.bammdata(best, labels = T, font = 3, cex = 0.7)
par(mfrow = c(0,0))
par(mfrow = c(1,1))
ss <- plot.bammdata(best, labels = T, font = 3, cex = 0.7)
title(main = "Best shift configuration", sub = "time before present")
addBAMMlegend(ss, location = "topleft", nTicks = 1)
addBAMMshifts(best, cex = 3, pch = 1)
axisPhylo()
plot.new()
par(mfrow = c(1,1))
par(mar=c(0.5, 4.5, 0.5, 0.5))
ss <- plot.bammdata(best, labels = T, font = 3, cex = 0.7)
title(main = "Best shift configuration", sub = "time before present")
par(mar=c(1, 4.5, 1, 0.5))
ss <- plot.bammdata(best, labels = T, font = 3, cex = 0.7)
par(mar=c(2, 4.5, 2, 0.5))
ss <- plot.bammdata(best, labels = T, font = 3, cex = 0.7)
title(main = "Best shift configuration", sub = "time before present")
par(mar=c(2, 4.5, 5, 0.5))
ss <- plot.bammdata(best, labels = T, font = 3, cex = 0.7)
title(main = "Best shift configuration", sub = "time before present")
par(mar=c(5, 4.5, 2, 0.5))
ss <- plot.bammdata(best, labels = T, font = 3, cex = 0.7)
title(main = "Best shift configuration", sub = "time before present")
par(mar=c(4, 4.5, 2, 0.5))
ss <- plot.bammdata(best, labels = T, font = 3, cex = 0.7)
par(mar=c(3.5, 4.5, 2, 0.5))
ss <- plot.bammdata(best, labels = T, font = 3, cex = 0.7)
title(main = "Best shift configuration", sub = "time before present")
par(mar=c(4, 4.5, 2, 0.5))
ss <- plot.bammdata(best, labels = T, font = 3, cex = 0.7)
title(main = "Best shift configuration", sub = "time before present")
par(mar=c(4.5, 4.5, 2, 0.5))
ss <- plot.bammdata(best, labels = T, font = 3, cex = 0.7)
title(main = "Best shift configuration", sub = "time before present")
par(mar=c(5, 4.5, 2, 0.5))
ss <- plot.bammdata(best, labels = T, font = 3, cex = 0.7)
title(main = "Best shift configuration", sub = "time before present")
addBAMMlegend(ss, location = "topleft", nTicks = 1)
addBAMMshifts(best, cex = 3, pch = 1)
axisPhylo()
plot.new()
par(mfrow = c(1,1))
par(mar=c(5, 4.5, 2, 0.5))
ss <- plot.bammdata(best, labels = T, font = 3, cex = 0.7)
title(main = "Best shift configuration", sub = "time before present")
addBAMMlegend(ss, location = "topleft", nTicks = 1)
addBAMMshifts(best, cex = 3, pch = 1)
axisPhylo()
ss <- plot.bammdata(best, labels = T, font = 3, cex = 0.6)
ss <- plot.bammdata(best, labels = T, font = 3, cex = 0.5)
title(main = "Best shift configuration", sub = "time before present")
addBAMMlegend(ss, location = "topleft", nTicks = 1)
addBAMMshifts(best, cex = 3, pch = 1)
axisPhylo()
ss <- plot.bammdata(best, labels = T, font = 3, cex = 0.55)
title(main = "Best shift configuration", sub = "time before present")
addBAMMlegend(ss, location = "topleft", nTicks = 1)
addBAMMshifts(best, cex = 3, pch = 1)
axisPhylo()
par(font = 1)
marg_probs <- marginalShiftProbsTree(whale_data)
plot.phylo(marg_probs, cex = 0.55)
title(main = "Marginal shift probability")
add.scale.bar(x = 0.5, y = 0.5, font = 1)
#### clade-specific evolutionary rates ####
global_rates <- getCladeRates(whale_data)
mean(global_rates$lambda)
quantile(global_rates$lambda, c(0.05, 0.95))
rateshift_MRCA <- getMRCA(tree, tip = c("Orcinus_orca_AF084061", "Stenella_attenuata_AF084103"))
tree$tip.label
rateshift_MRCA <- getMRCA(tree, tip = c("Orcinus_orca_AF084061", "Stenella_longirostris_AF084103"))
Stenella_attenuata_AF084096
clade_rates <- getCladeRates(tree, node = rateshift_MRCA)
clade_rates <- getCladeRates(tree, node = rateshift_MRCA)
rateshift_MRCA
clade_rates <- getCladeRates(whale_data, node = rateshift_MRCA)
mean(clade_rates$lambda)
quantile(clade_rates$lambda, c(0.05, 0.95))
#### Rate-through-time analysis ####
par(font = 1)
plotRateThroughTime(whale_data,
ratetype = "speciation",
avgCol = "black",
intervalCol = "gray80",
intervals = c(0.05, 0.95),
opacity = 1)
plotRateThroughTime(whale_data,
ratetype = "speciation",
avgCol = "black",
intervalCol = "gray80",
intervals = c(0.05, 0.95),
opacity = 1)
s <- plot.bammdata(whale_data, spex = "s", labels = T, font = 3, cex = 0.5)
title(main = "Mean speciation rate", sub = "time before present")
addBAMMlegend(s, location = "topleft", nTicks = 1)
axisPhylo()
plot.new()]
plot.new()
#two planel plot for lab report
par(mfrow = c(1,2))
s <- plot.bammdata(whale_data, spex = "s", labels = T, font = 3, cex = 0.5)
title(main = "Mean speciation rate", sub = "time before present")
addBAMMlegend(s, location = "topleft", nTicks = 1)
axisPhylo()
par(font = 1)
marg_probs <- marginalShiftProbsTree(whale_data)
plot.phylo(marg_probs, cex = 0.55)
title(main = "Marginal shift probability")
add.scale.bar(x = 0.5, y = 0.5, font = 1)
add.scale.bar(x = 0.5, y = 0.25, font = 1)
add.scale.bar(x = 0.5, y = -0.25, font = 1)
add.scale.bar(x = 0.5, y = -10.25, font = 1)
add.scale.bar(x = 0.5, y = -100.25, font = 1)
add.scale.bar(x = 0.5, y = 0.0, font = 1)
add.scale.bar(x = 10.5, y = 0.0, font = 1)
add.scale.bar(x = 5.5, y = 0.0, font = 1)
add.scale.bar(x = 2.5, y = 0.0, font = 1)
plot.new()
#two planel plot for lab report
par(mfrow = c(1,2))
s <- plot.bammdata(whale_data, spex = "s", labels = T, font = 3, cex = 0.5)
title(main = "Mean speciation rate", sub = "time before present")
addBAMMlegend(s, location = "topleft", nTicks = 1)
axisPhylo()
par(font = 1)
marg_probs <- marginalShiftProbsTree(whale_data)
plot.phylo(marg_probs, cex = 0.55)
title(main = "Marginal shift probability")
add.scale.bar(x = 2.5, y = 0.0, font = 1)
plot.new
#two planel plot for lab report
par(mfrow = c(1,2))
par(mar=c(5, 4.5, 2, 0.5))
s <- plot.bammdata(whale_data, spex = "s", labels = T, font = 3, cex = 0.5)
title(main = "Mean speciation rate", sub = "time before present")
addBAMMlegend(s, location = "topleft", nTicks = 1)
#two planel plot for lab report
par(mfrow = c(1,2))
par(mar=c(5, 4.5, 2, 10.5))
s <- plot.bammdata(whale_data, spex = "s", labels = T, font = 3, cex = 0.5)
#two planel plot for lab report
par(mfrow = c(1,2))
par(mar=c(5, 4.5, 2, 0.0))
s <- plot.bammdata(whale_data, spex = "s", labels = T, font = 3, cex = 0.5)
#two planel plot for lab report
par(mfrow = c(1,2))
par(mar=c(5, 4.5, 2, -10.0))
s <- plot.bammdata(whale_data, spex = "s", labels = T, font = 3, cex = 0.5)
#two planel plot for lab report
par(mfrow = c(1,2))
par(mar=c(5, 1.5, 2, 0.0))
s <- plot.bammdata(whale_data, spex = "s", labels = T, font = 3, cex = 0.5)
#two planel plot for lab report
par(mfrow = c(1,2))
par(mar=c(5, 1.0, 2, 0.0))
s <- plot.bammdata(whale_data, spex = "s", labels = T, font = 3, cex = 0.5)
title(main = "Mean speciation rate", sub = "time before present")
addBAMMlegend(s, location = "topleft", nTicks = 1)
axisPhylo()
par(font = 1)
#two planel plot for lab report
par(mfrow = c(1,2))
par(mar=c(5, 1.0, 2, 0.0))
s <- plot.bammdata(whale_data, spex = "s", labels = T, font = 3, cex = 0.5)
title(main = "Mean speciation rate", sub = "time before present (my)")
addBAMMlegend(s, location = "topleft", nTicks = 1)
axisPhylo()
par(font = 1)
marg_probs <- marginalShiftProbsTree(whale_data)
plot.phylo(marg_probs, cex = 0.55)
title(main = "Marginal shift probability")
add.scale.bar(x = 2.5, y = 0.0, font = 1)
add.scale.bar(x = 2.5, y = 0.0, font = 1)
add.scale.bar(x = 1.5, y = 0.0, font = 1)
summary(css)
mean(global_rates$lambda)
quantile(global_rates$lambda, c(0.05, 0.95))
rateshift_MRCA <- getMRCA(tree, tip = c("Orcinus_orca_AF084061", "Stenella_longirostris_AF084103"))
clade_rates <- getCladeRates(whale_data, node = rateshift_MRCA)
mean(clade_rates$lambda)
quantile(clade_rates$lambda, c(0.05, 0.95))
tree$tip.label
Phocoenoides_dalli_PDU09679
Phocoenoides_dalli_PDU09679
smaller_clade_MRCA <- getMRCA(tree, tip = c("Delphinapterus_leucas_DLU72037","Phocoenoides_dalli_PDU09679"))
smaller_clade_rates <- getCladeRates(whale_data, node = smaller_clade_MRCA)
mean(smaller_clade_rates$lambda)
quantile(smaller_clade_rates$lambda)
quantile(smaller_clade_rates$lambda, c(0.05, 0.95))
lowest_clade_rates_MRCA <- getMRCA(tree, tip = c("Caperea_marginata_X75586","Balaenoptera_acutorostrata"))
lowest_clade_rates <- getCladeRates(whale_data, node = lowest_clade_rates_MRCA)
mean(lowest_clade_rates$lambda)
quantile(lowest_clade_rates$lambda, c(0.05, 0.95))
tree$tip.label
lowest_clade_rates_MRCA <- getMRCA(tree, tip = c("Ziphius_cavirostris_AF304075_","Mesoplodon_europaeus_X92537"))
lowest_clade_rates <- getCladeRates(whale_data, node = lowest_clade_rates_MRCA)
mean(lowest_clade_rates$lambda)
quantile(lowest_clade_rates$lambda, c(0.05, 0.95))
lowest_clade_rates_MRCA <- getMRCA(tree, tip = c("Caperea_marginata_X75586","Balaenoptera_acutorostrata"))
lowest_clade_rates <- getCladeRates(whale_data, node = lowest_clade_rates_MRCA)
mean(lowest_clade_rates$lambda)
quantile(lowest_clade_rates$lambda, c(0.05, 0.95))
