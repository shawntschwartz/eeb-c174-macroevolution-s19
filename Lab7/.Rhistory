library(colordistancve)
library(colordistance)
install.packages("colordistance")
install.packages("pavo")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
getKMeanColors("~/Dropbox/machine_learning_fishes/randall/Scaridae/Chlorurus_Chlorurus gibbus_-1128176173.jpg", lower=c(0, 0, 0), upper=c(0.2, 0.2, 0.2))
img
source('~/.active-rstudio-document', echo=TRUE)
img
image_transparent(img, 'white')
print(image_transparent(img, 'white'))
source('~/.active-rstudio-document', echo=TRUE)
test
source('~/.active-rstudio-document', echo=TRUE)
?getKMeanColors
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install_github?
install_github?
install_github\
install_github
install.packages("devtools")
install_github
# define paths
base.dir <- "/Users/shawn/Developer/chaetodontidae_analysis/chaetodontidae_pilot/"
base.url <- "/"
fig.path <- "images/Chaetodontidae/"
# this is where figures will be sent
paste0(base.dir, fig.path)
library(dplyr)
pca_k3 <- select(fish_adj_tbl_k_3, rowname, m_r, m_c, Sc, St, A)
# define paths
base.dir <- "/Users/shawn/Developer/chaetodontidae_analysis/chaetodontidae_pilot/"
base.url <- "/"
fig.path <- "images/Chaetodontidae/"
# this is where figures will be sent
paste0(base.dir, fig.path)
library(dplyr)
pca_k3 <- select(fish_adj_tbl_k_3, rowname, m_r, m_c, Sc, St, A)
# define paths
base.dir <- "/Users/shawn/Developer/chaetodontidae_analysis/chaetodontidae_pilot/"
base.url <- "/"
fig.path <- "images/Chaetodontidae/"
# this is where figures will be sent
paste0(base.dir, fig.path)
library(dplyr)
pca_k3 <- select(fish_adj_tbl_k_3, rowname, m_r, m_c, Sc, St, A)
# define paths
base.dir <- "/Users/shawn/Developer/chaetodontidae_analysis/chaetodontidae_pilot/"
base.url <- "/"
fig.path <- "images/Chaetodontidae/"
# this is where figures will be sent
paste0(base.dir, fig.path)
library(dplyr)
pca_k3 <- select(fish_adj_tbl_k_3, rowname, m_r, m_c, Sc, St, A)
# define paths
base.dir <- "/Users/shawn/Developer/chaetodontidae_analysis/chaetodontidae_pilot/"
base.url <- "/"
fig.path <- "images/Chaetodontidae/"
# this is where figures will be sent
paste0(base.dir, fig.path)
library(dplyr)
pca_k3 <- select(fish_adj_tbl_k_3, rowname, m_r, m_c, Sc, St, A)
# define paths
base.dir <- "/Users/shawn/Developer/chaetodontidae_analysis/chaetodontidae_pilot/"
base.url <- "/"
fig.path <- "images/Chaetodontidae/"
# this is where figures will be sent
paste0(base.dir, fig.path)
library(dplyr)
pca_k3 <- select(fish_adj_tbl_k_3, rowname, m_r, m_c, Sc, St, A)
pavo
library.install(pavo)
packages.install("pavo")
package.install("pavo")
install.packages("pavo")
# define paths
base.dir <- "/Users/shawn/Developer/chaetodontidae_analysis/chaetodontidae_pilot/"
base.url <- "/"
fig.path <- "images/Chaetodontidae/"
# this is where figures will be sent
paste0(base.dir, fig.path)
library(dplyr)
pca_k3 <- select(fish_adj_tbl_k_3, rowname, m_r, m_c, Sc, St, A)
libary(sos)
library("sos")
install.packages("sos")
# define paths
base.dir <- "/Users/shawn/Developer/chaetodontidae_analysis/chaetodontidae_pilot/"
base.url <- "/"
fig.path <- "images/Chaetodontidae/"
# this is where figures will be sent
paste0(base.dir, fig.path)
library(dplyr)
pca_k3 <- select(fish_adj_tbl_k_3, rowname, m_r, m_c, Sc, St, A)
install.packages("rmarkdown")
# define paths
base.dir <- "/Users/shawn/Developer/chaetodontidae_analysis/chaetodontidae_pilot/"
base.url <- "/"
fig.path <- "images/Chaetodontidae/"
# this is where figures will be sent
paste0(base.dir, fig.path)
library(dplyr)
pca_k3 <- select(fish_adj_tbl_k_3, rowname, m_r, m_c, Sc, St, A)
# define paths
base.dir <- "/Users/shawn/Developer/chaetodontidae_analysis/chaetodontidae_pilot/"
base.url <- "/"
fig.path <- "images/Chaetodontidae/"
# this is where figures will be sent
paste0(base.dir, fig.path)
library(dplyr)
pca_k3 <- select(fish_adj_tbl_k_3, rowname, m_r, m_c, Sc, St, A)
# define paths
base.dir <- "/Users/shawn/Developer/chaetodontidae_analysis/chaetodontidae_pilot/"
base.url <- "/"
fig.path <- "images/Chaetodontidae/"
# this is where figures will be sent
paste0(base.dir, fig.path)
library(dplyr)
pca_k3 <- select(fish_adj_tbl_k_3, rowname, m_r, m_c, Sc, St, A)
# define paths
base.dir <- "/Users/shawn/Developer/chaetodontidae_analysis/chaetodontidae_pilot/"
base.url <- "/"
fig.path <- "images/Chaetodontidae/"
# this is where figures will be sent
paste0(base.dir, fig.path)
library(dplyr)
pca_k3 <- select(fish_adj_tbl_k_3, rowname, m_r, m_c, Sc, St, A)
# define paths
base.dir <- "/Users/shawn/Developer/chaetodontidae_analysis/chaetodontidae_pilot/"
base.url <- "/"
fig.path <- "images/Chaetodontidae/"
# this is where figures will be sent
paste0(base.dir, fig.path)
rmarkdown?
d
?rmarkdown
render("12-28-2018-analyses-sschwartz.Rmd", html_document())
render
renderMarkdown
markdown::renderMarkdown("~/Developer/chaetodontidae_analysis/chaetodontidae_pilot/12-28-2018-analyses-sschwartz.Rmd", html_document())
setwd("/Users/shawn/Developer/chaetodontidae_analysis/chaetodontidae_pilot/")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("stargazer")
library(stargazer)
stargazer(cars)
knitr::opts_chunk$set(echo = TRUE)
library(stargazer)
library(stringr)
library(tidyverse)
setwd("~/Dropbox/ICB_Chaet_paper_2019")
#read in adjacency statistics
adj_stats_path <- "/Users/shawn/Dropbox/ICB_Chaet_paper_2019/1-28-2019-analyses_files/fish_adjacency_stats_table.csv"
adj_stats<- read.table(adj_stats_path, sep = ",", header=T, as.is=F)
adj_stats$name <- as.character(adj_stats$name)
#need to create a new column that is just the genus_species for table
str_split(adj_stats$name, "_")
adj_stats %>% separate(name, c(NA, "genus", "species", NA),sep = "_", remove = F) ->adj_stats
adj_stats$genus <- substr(adj_stats$genus, 0, 1)
adj_stats %>%
unite('species', c(genus, species)) -> adj_stats
setwd("~/Dropbox/ICB_Chaet_paper_2019")
#read in adjacency statistics
adj_stats_path <- "/Users/shawn/Dropbox/ICB_Chaet_paper_2019/1-28-2019-analyses_files/fish_adjacency_stats_table.csv"
adj_stats<- read.table(adj_stats_path, sep = ",", header=T, as.is=F)
adj_stats$name <- as.character(adj_stats$name)
#need to create a new column that is just the genus_species for table
str_split(adj_stats$name, "_")
adj_stats %>% separate(name, c(NA, "genus", "species", NA),sep = "_", remove = F) ->adj_stats
adj_stats$genus <- substr(adj_stats$genus, 0, 1)
adj_stats$binomial <- paste(adj_stats$genus, adj_stats$species, sep="_")
image_paths <- str_c("/Users/shawn/Dropbox/ICB_Chaet_paper_2019/images/curated_images/", adj_stats$name, ".png")
adj_stats$image_paths <- image_paths
knitter_path <- sprintf('![](%s){width=25%%}', image_paths)
adj_stats$knitter_path <-  knitter_path
select(adj_stats, knitter_path, species,m) %>% arrange(desc(m)) -> m_sorted
adj_stats
View(adj_stats)
View(adj_stats)
knitr::opts_chunk$set(echo = TRUE)
library(stargazer)
library(stringr)
library(tidyverse)
library(dplyr)
setwd("~/Dropbox/ICB_Chaet_paper_2019")
#read in adjacency statistics
adj_stats_path <- "/Users/shawn/Dropbox/ICB_Chaet_paper_2019/1-28-2019-analyses_files/fish_adjacency_stats_table.csv"
adj_stats<- read.table(adj_stats_path, sep = ",", header=T, as.is=F)
adj_stats$name <- as.character(adj_stats$name)
#need to create a new column that is just the genus_species for table
str_split(adj_stats$name, "_")
adj_stats %>% separate(name, c(NA, "genus", "species", NA),sep = "_", remove = F) ->adj_stats
adj_stats$genus <- substr(adj_stats$genus, 0, 1)
adj_stats$binomial <- paste(adj_stats$genus, adj_stats$species, sep="_")
image_paths <- str_c("/Users/shawn/Dropbox/ICB_Chaet_paper_2019/images/curated_images/", adj_stats$name, ".png")
adj_stats$image_paths <- image_paths
knitter_path <- sprintf('![](%s){width=25%%}', image_paths)
adj_stats$knitter_path <-  knitter_path
select(adj_stats, knitter_path, species,m) %>% arrange(desc(m)) -> m_sorted
View(adj_stats)
View(adj_stats)
names(adj_stats)[2] <- "Full.Genus"
names(adj_stats)[5] <- "ID"
select(adj_stats, knitter_path, species,m) %>% arrange(desc(m)) -> m_sorted
select(adj_stats, knitter_path, species,A) %>% arrange(desc(A)) -> A_sorted
select(adj_stats, knitter_path, species,Jc) %>% arrange(desc(Jc)) -> Jc_sorted
select(adj_stats, knitter_path, species,Jt) %>% arrange(desc(Jt)) -> Jt_sorted
select(adj_stats, knitter_path, species,m_dS) %>% arrange(desc(m_dS)) -> mS_sorted
select(adj_stats, knitter_path, species, m_dL) %>% arrange(desc(m_dL)) -> mL_sorted
m_sorted
select(adj_stats, knitter_path, binomial,m) %>% arrange(desc(m)) -> m_sorted
m_sorted
select(adj_stats, knitter_path, binomial,m) %>% arrange(desc(m)) -> m_sorted
select(adj_stats, knitter_path, binomial,A) %>% arrange(desc(A)) -> A_sorted
select(adj_stats, knitter_path, binomial,Jc) %>% arrange(desc(Jc)) -> Jc_sorted
select(adj_stats, knitter_path, binomial,Jt) %>% arrange(desc(Jt)) -> Jt_sorted
select(adj_stats, knitter_path, binomial,m_dS) %>% arrange(desc(m_dS)) -> mS_sorted
select(adj_stats, knitter_path, binomial, m_dL) %>% arrange(desc(m_dL)) -> mL_sorted
bind_cols(m_sorted, A_sorted, Jc_sorted, Jt_sorted) -> sorted_patterns
sorted_patterns
View(sorted_patterns)
View(sorted_patterns)
cols_to_plot <- list(m_sorted, A_sorted, Jc_sorted, Jt_sorted, mS_sorted, mL_sorted)
cols_to_plot
View(cols_to_plot)
View(cols_to_plot)
knitr::kable(cols_to_plot[1])
knitter_path
install.packages("magrittr")
install.packages("magrittr")
install.packages("magrittr")
install.packages("flextable")
knitr::opts_chunk$set(echo = TRUE)
library(stargazer)
library(stringr)
library(tidyverse)
library(dplyr)
library(flextable)
library(magrittr)
#test table
cols_to_plot[1] %>% autofit() %>%
width(j=~knitter_path, width = 1) %>% width(j=~binomial, width = 1) %>% width(j=~m, width = 1)
library(kableExtra)
library(flextable)
library(magrittr)
library(kableExtra)
#test table
cols_to_plot[1] %>% autofit() %>%
width(j=~knitter_path, width = 1) %>% width(j=~binomial, width = 1) %>% width(j=~m, width = 1)
knitr::kable(cols_to_plot[1], "html") %>%
kable_styling(full_width = F)
knitr::opts_chunk$set(echo = TRUE)
library(stargazer)
library(stringr)
library(tidyverse)
library(dplyr)
library(flextable)
library(magrittr)
library(kableExtra)
knitr::kable(cols_to_plot[1], format = "html", tabble.attr = "style='width:30%;'")
library(stargazer)
library(stringr)
library(tidyverse)
library(dplyr)
library(flextable)
library(magrittr)
library(kableExtra)
setwd("~/Dropbox/ICB_Chaet_paper_2019")
#read in adjacency statistics
adj_stats_path <- "/Users/shawn/Dropbox/ICB_Chaet_paper_2019/appendix_tables/fish_adjacency_stats_table_roa-mod.csv"
adj_stats<- read.table(adj_stats_path, sep = ",", header=T, as.is=F)
adj_stats$name <- as.character(adj_stats$name)
#need to create a new column that is just the genus_species for table
str_split(adj_stats$name, "_")
adj_stats %>% separate(name, c(NA, "genus", "species", NA),sep = "_", remove = F) ->adj_stats
adj_stats$genus <- substr(adj_stats$genus, 0, 1)
adj_stats$binomial <- paste(adj_stats$genus, adj_stats$species, sep="_")
image_paths <- str_c("/Users/shawn/Dropbox/ICB_Chaet_paper_2019/images/curated_images/", adj_stats$name, ".png")
adj_stats$image_paths <- image_paths
knitter_path <- sprintf('![](%s){width=25%%}', image_paths)
adj_stats$knitter_path <-  knitter_path
names(adj_stats)[2] <- "Full.Genus"
names(adj_stats)[5] <- "ID"
select(adj_stats, knitter_path, binomial,m) %>% arrange(desc(m)) -> m_sorted
select(adj_stats, knitter_path, binomial,A) %>% arrange(desc(A)) -> A_sorted
select(adj_stats, knitter_path, binomial,Jc) %>% arrange(desc(Jc)) -> Jc_sorted
select(adj_stats, knitter_path, binomial,Jt) %>% arrange(desc(Jt)) -> Jt_sorted
select(adj_stats, knitter_path, binomial,m_dS) %>% arrange(desc(m_dS)) -> mS_sorted
select(adj_stats, knitter_path, binomial, m_dL) %>% arrange(desc(m_dL)) -> mL_sorted
bind_cols(m_sorted, A_sorted, Jc_sorted, Jt_sorted) -> sorted_patterns
cols_to_plot <- list(m_sorted, A_sorted, Jc_sorted, Jt_sorted, mS_sorted, mL_sorted)
knitr::kable(cols_to_plot[1], format = "html", tabble.attr = "style='width:30%;'")
install.packages("cars")
install.packages("car")
?.car
??car
source('~/Developer/EEB-C174-Labs/Lab3/lab_three_class.R', echo=TRUE)
source('~/Developer/EEB-C174-Labs/Lab3/lab_three_class.R', echo=TRUE)
rm(list=ls())
#imports
library(ape)
library(phytools)
library(car)
#### Simulating Browninan Motion ####
# Setting up our parameters
sig2 <- 0.01 #sigma^2
n_steps <- 1:100 #number of steps (time)
# Fill a vector with a bunch of small steps
vec <- numeric(100) #going to fill this with each time step
for (i in n_steps)
{
small_step <- rnorm(n = 1, sd = sqrt(sig2))
vec[i + 1] <- vec[i] + small_step
}
plot(n_steps, vec[1:100], type = "1", ylim = c(-2, 2), ylab = "x", xlab = "t")
{
small_step <- rnorm(n = 1, sd = sqrt(sig2))
vec[i + 1] <- vec[i] + small_step
}
plot(n_steps, vec[1:100], type = "1", ylim = c(-2, 2), ylab = "x", xlab = "t")
source('~/Developer/EEB-C174-Labs/Lab3/lab_three_class.R', echo=TRUE)
plot(n_steps, vec[1:100], type = "1", ylim = c(-2, 2), ylab = "x", xlab = "t")
install.packages("BAMMtools")
install.packages("coda")
source('~/Developer/EEB-C174-Labs/Lab7/lab_seven_class.R', echo=TRUE)
plot(tree, cex = 0.6)
plot(tree, cex = 0.5)
axisPhylo()
# Tree Must Be Ultrametric
is.ultrametric(tree)
# Tree Must Be Binary (all of the nodes need to lead to 2 branches, and no more than 2)
is.binary.tree(tree)
#
min(tree$edge.length)
#### Create BAMM Control File ####
#estimate priors and create control files
priors <- setBAMMpriors(tree, outfile = NULL)
prior
priors
generateControlFile(file = paste0(output_path,"controlfile.txt"), params = list(
treefile = "tree.tre",
globalSamplingFraction = "1", #This is 1 for complete sampling (for homework, put in a fraction like 0.8)
seed = sample(1:1000000, 1),
overwrite = "0",
expectedNumberOfShifts = "1",
lambdaInitPrior = as.numeric(priors["lambdaInitPrior"]),
lambdaShiftPrior = as.numeric(priors["lambdaShiftPrior"]),
muInitPrior = as.numeric(priors["muInitPrior"]),
numberOfGenerations = "5000000",
mcmcWriteFreq = "1000",
eventDataWriteFreq = "1000",
printFreq = "1000",
acceptanceResetFreq = "1000",
outName = "classwork",
##numberOfChains = "2", #set to the number of CPUs
numberOfChains = "8", #set to the number of CPUs
deltaT = "0.01"
))
#### Import BAMM results into R ####
edata <- getEventData(tree, eventdata = "classwork_event_data.txt", burnin = 0.1)
#### Import BAMM results into R ####
edata <- getEventData(tree, eventdata = paste0(resources_path,"classwork_event_data.txt"), burnin = 0.1)
#burnin -> we are throwing out the first 10 percent of the data b/c of the initial
##getting into the topology with the initial chain runs
summary(edata)
#### Check quality of BAMM results ####
##Assess MCMC convergence
mcmcout <- read.csv(paste0(resources_path,"classwork_mcmc_out.txt"))
plot(mcmcout$logLik ~ mcmcout$generation)
##Test for convergence of the MCMC chains with the coda package
burnstart <- floor(0.1 * nrow(mcmcout)) # discard the first 10% of samples as burnin
postburn <- mcmcout[burnstart:nrow(mcmcout), ]
effectiveSize(postburn$N_shifts)
effectiveSize(postburn$logLik)
#### Analyze BAMM results with BAMMtools ####
##Analysis of rate shifts
computeBayesFactors(paste0(resources_path,"classwork_mcmc_out.txt", expectedNumberOfShifts = 1, burnin = 0.1))
#### Analyze BAMM results with BAMMtools ####
##Analysis of rate shifts
computeBayesFactors(paste0(resources_path,"classwork_mcmc_out.txt"), expectedNumberOfShifts = 1, burnin = 0.1))
#### Analyze BAMM results with BAMMtools ####
##Analysis of rate shifts
computeBayesFactors(file = paste0(resources_path,"classwork_mcmc_out.txt"), expectedNumberOfShifts = 1, burnin = 0.1))
#### Analyze BAMM results with BAMMtools ####
##Analysis of rate shifts
computeBayesFactors("resources/classwork_mcmc_out.txt", expectedNumberOfShifts = 1, burnin = 0.1))
#### Analyze BAMM results with BAMMtools ####
##Analysis of rate shifts
computeBayesFactors(paste0(resources_path,"classwork_mcmc_out.txt"), expectedNumberOfShifts = 1, burnin = 0.1)
#these give the likelihoods as well as thee plot of thee prior and posterior probabiltiese
##to be able to say if there has been evidence of there being 1 rate shift
### i.e., 0:1
plotPrior(paste0(resources_path,"classwork_mcmc_out.txt"), expectedNumberOfShifts = 1)
##Analysis of rates
#phylorate plot: displays mean, model-averaged diversification rates
#(i.e., speciation "s", extinction "e", or net diversification "netdiv") on branches of your tree with colors
s <- plot.bammdata(edata, spex = "s", labels = T, font = 3, cex = 0.5)
#figure out the number of distinct rate shift configurations
css <- credibleShiftSet(edata, expectedNumberOfShifts = 1, threshold = 5, set.limit = 0.95)
css$number.distinct #this is number of distinct shift configurations in the data
summary(css)
sss <- plot.credibleshiftset(css, border = F)
#we just viewed a summary of the distinct rate shift configurations with the highest probabilities
#now lets find and plot the single best shift configuration (i.e, the one we see most often in the posterior distribution)
plot.new()
best <- getBestShiftConfiguration(edata, expectedNumberOfShifts = 1)
#we just viewed a summary of the distinct rate shift configurations with the highest probabilities
#now lets find and plot the single best shift configuration (i.e, the one we see most often in the posterior distribution)
plot.new()
best <- getBestShiftConfiguration(edata, expectedNumberOfShifts = 1)
best <- getBestShiftConfiguration(edata, expectedNumberOfShifts = 1)
#we just viewed a summary of the distinct rate shift configurations with the highest probabilities
#now lets find and plot the single best shift configuration (i.e, the one we see most often in the posterior distribution)
plot.new()
ss <- plot.bammdata(best, labels = T, font = 3, cex = 0.7)
title(main = "Best shift configuration", sub = "time before present")
addBAMMlegend(ss, location = "topleft", nTicks = 1)
addBAMMshifts(best, cex = 3, pch = 1)
#we just viewed a summary of the distinct rate shift configurations with the highest probabilities
#now lets find and plot the single best shift configuration (i.e, the one we see most often in the posterior distribution)
plot.new()
best <- getBestShiftConfiguration(edata, expectedNumberOfShifts = 1)
ss <- plot.bammdata(best, labels = T, font = 3, cex = 0.7)
title(main = "Best shift configuration", sub = "time before present")
addBAMMlegend(ss, location = "topleft", nTicks = 1)
addBAMMshifts(best, cex = 3, pch = 1)
axisPhylo()
ss <- plot.bammdata(best, labels = T, font = 3, cex = 0.7)
title(main = "Best shift configuration", sub = "time before present")
addBAMMlegend(ss, location = "topleft", nTicks = 1)
addBAMMshifts(best, cex = 3, pch = 1)
axisPhylo()
#next we will plot a tree with branch lengths scaled by the probabilty that they contain a raate shift
#the longer the branches, the greater probability that there was a rate shift somewhere along that branch
###THUS,...
#plot marginal probability as a function of branch lengths (think about it as the probability of the rate shift occuring (long branch = high chance that a rate shift occured, whereas a low bvranch would = a low chance that a rate shift occured))
##^^^USE THIS INFO FOR A FIGURE LABEL IN THE FINAL PAPERr
par(font = 1)
marg_probs <- marginalShiftProbsTree(edata)
plot.phylo(marg_probs, cex = 0.7)
title(main = "Marginal shift probability")
add.scale.bar(x = 0.5, y = 0.5, font = 1)
## Clade-specific evolutionary rates
#we can compute clade-specific marginal distributions of rates with getCladeRates()
#below we estimate an overall speciation rate and 90% credible interval, then rates and intervals for the T and t clades separately
global_rates <- getCladeRates(edata)
mean(global_rates$lambda)
#the speciation rate estimate is 0.19 new species per million years
quantile(global_rates$lambda, c(0.05, 0.95))
#there is 90% probability that the speciation rate of this clade is between 0.11 and 0.29
T_MCRA <- getMRCA(tree, tip = c("T1", "T10"))
T_rates <- getCladeRates(edata, nodee = T_MRCA)
T_rates <- getCladeRates(edata, node = T_MRCA)
#there is 90% probability that the speciation rate of this clade is between 0.11 and 0.29
T_MRCA <- getMRCA(tree, tip = c("T1", "T10"))
T_rates <- getCladeRates(edata, node = T_MRCA)
mean(T_rates$lambda)
quantile(T_rates$lambda, c(0.05, 0.95))
t_MRCA <- getMRCA(tree, tip = c("t1", "t20"))
t_rates <- getCladeRates(edata, node = t_MRCA)
mean(t_rates$lambda)
quantile(t_rates$lambda, c(0.05, 0.95))
##Rate-through-time analysis
#we can plot speciation (default) of extinction rats through timee with plotRateThroughTime()
#This plot can display dynamics in speciation or extinction rates
#The black line is the mean speciation rate, and the grey area is the 90% credible interval for the speciation rate
par(font = 1)
plotRateThroughTime(edata,
ratetype = "speciation",
avgCol = "black",
intervalCol = "gray80",
intervals = c(0.05, 0.95),
opacity = 1)
