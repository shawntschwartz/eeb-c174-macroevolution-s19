base.dir <- "/Users/shawn/Developer/chaetodontidae_analysis/chaetodontidae_pilot/"
base.url <- "/"
fig.path <- "images/Chaetodontidae/"
# this is where figures will be sent
paste0(base.dir, fig.path)
library(dplyr)
pca_k3 <- select(fish_adj_tbl_k_3, rowname, m_r, m_c, Sc, St, A)
# define paths
base.dir <- "/Users/shawn/Developer/chaetodontidae_analysis/chaetodontidae_pilot/"
base.url <- "/"
fig.path <- "images/Chaetodontidae/"
# this is where figures will be sent
paste0(base.dir, fig.path)
library(dplyr)
pca_k3 <- select(fish_adj_tbl_k_3, rowname, m_r, m_c, Sc, St, A)
pavo
library.install(pavo)
packages.install("pavo")
package.install("pavo")
install.packages("pavo")
# define paths
base.dir <- "/Users/shawn/Developer/chaetodontidae_analysis/chaetodontidae_pilot/"
base.url <- "/"
fig.path <- "images/Chaetodontidae/"
# this is where figures will be sent
paste0(base.dir, fig.path)
library(dplyr)
pca_k3 <- select(fish_adj_tbl_k_3, rowname, m_r, m_c, Sc, St, A)
libary(sos)
library("sos")
install.packages("sos")
# define paths
base.dir <- "/Users/shawn/Developer/chaetodontidae_analysis/chaetodontidae_pilot/"
base.url <- "/"
fig.path <- "images/Chaetodontidae/"
# this is where figures will be sent
paste0(base.dir, fig.path)
library(dplyr)
pca_k3 <- select(fish_adj_tbl_k_3, rowname, m_r, m_c, Sc, St, A)
install.packages("rmarkdown")
# define paths
base.dir <- "/Users/shawn/Developer/chaetodontidae_analysis/chaetodontidae_pilot/"
base.url <- "/"
fig.path <- "images/Chaetodontidae/"
# this is where figures will be sent
paste0(base.dir, fig.path)
library(dplyr)
pca_k3 <- select(fish_adj_tbl_k_3, rowname, m_r, m_c, Sc, St, A)
# define paths
base.dir <- "/Users/shawn/Developer/chaetodontidae_analysis/chaetodontidae_pilot/"
base.url <- "/"
fig.path <- "images/Chaetodontidae/"
# this is where figures will be sent
paste0(base.dir, fig.path)
library(dplyr)
pca_k3 <- select(fish_adj_tbl_k_3, rowname, m_r, m_c, Sc, St, A)
# define paths
base.dir <- "/Users/shawn/Developer/chaetodontidae_analysis/chaetodontidae_pilot/"
base.url <- "/"
fig.path <- "images/Chaetodontidae/"
# this is where figures will be sent
paste0(base.dir, fig.path)
library(dplyr)
pca_k3 <- select(fish_adj_tbl_k_3, rowname, m_r, m_c, Sc, St, A)
# define paths
base.dir <- "/Users/shawn/Developer/chaetodontidae_analysis/chaetodontidae_pilot/"
base.url <- "/"
fig.path <- "images/Chaetodontidae/"
# this is where figures will be sent
paste0(base.dir, fig.path)
library(dplyr)
pca_k3 <- select(fish_adj_tbl_k_3, rowname, m_r, m_c, Sc, St, A)
# define paths
base.dir <- "/Users/shawn/Developer/chaetodontidae_analysis/chaetodontidae_pilot/"
base.url <- "/"
fig.path <- "images/Chaetodontidae/"
# this is where figures will be sent
paste0(base.dir, fig.path)
rmarkdown?
d
?rmarkdown
render("12-28-2018-analyses-sschwartz.Rmd", html_document())
render
renderMarkdown
markdown::renderMarkdown("~/Developer/chaetodontidae_analysis/chaetodontidae_pilot/12-28-2018-analyses-sschwartz.Rmd", html_document())
setwd("/Users/shawn/Developer/chaetodontidae_analysis/chaetodontidae_pilot/")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("stargazer")
library(stargazer)
stargazer(cars)
knitr::opts_chunk$set(echo = TRUE)
library(stargazer)
library(stringr)
library(tidyverse)
setwd("~/Dropbox/ICB_Chaet_paper_2019")
#read in adjacency statistics
adj_stats_path <- "/Users/shawn/Dropbox/ICB_Chaet_paper_2019/1-28-2019-analyses_files/fish_adjacency_stats_table.csv"
adj_stats<- read.table(adj_stats_path, sep = ",", header=T, as.is=F)
adj_stats$name <- as.character(adj_stats$name)
#need to create a new column that is just the genus_species for table
str_split(adj_stats$name, "_")
adj_stats %>% separate(name, c(NA, "genus", "species", NA),sep = "_", remove = F) ->adj_stats
adj_stats$genus <- substr(adj_stats$genus, 0, 1)
adj_stats %>%
unite('species', c(genus, species)) -> adj_stats
setwd("~/Dropbox/ICB_Chaet_paper_2019")
#read in adjacency statistics
adj_stats_path <- "/Users/shawn/Dropbox/ICB_Chaet_paper_2019/1-28-2019-analyses_files/fish_adjacency_stats_table.csv"
adj_stats<- read.table(adj_stats_path, sep = ",", header=T, as.is=F)
adj_stats$name <- as.character(adj_stats$name)
#need to create a new column that is just the genus_species for table
str_split(adj_stats$name, "_")
adj_stats %>% separate(name, c(NA, "genus", "species", NA),sep = "_", remove = F) ->adj_stats
adj_stats$genus <- substr(adj_stats$genus, 0, 1)
adj_stats$binomial <- paste(adj_stats$genus, adj_stats$species, sep="_")
image_paths <- str_c("/Users/shawn/Dropbox/ICB_Chaet_paper_2019/images/curated_images/", adj_stats$name, ".png")
adj_stats$image_paths <- image_paths
knitter_path <- sprintf('![](%s){width=25%%}', image_paths)
adj_stats$knitter_path <-  knitter_path
select(adj_stats, knitter_path, species,m) %>% arrange(desc(m)) -> m_sorted
adj_stats
View(adj_stats)
View(adj_stats)
knitr::opts_chunk$set(echo = TRUE)
library(stargazer)
library(stringr)
library(tidyverse)
library(dplyr)
setwd("~/Dropbox/ICB_Chaet_paper_2019")
#read in adjacency statistics
adj_stats_path <- "/Users/shawn/Dropbox/ICB_Chaet_paper_2019/1-28-2019-analyses_files/fish_adjacency_stats_table.csv"
adj_stats<- read.table(adj_stats_path, sep = ",", header=T, as.is=F)
adj_stats$name <- as.character(adj_stats$name)
#need to create a new column that is just the genus_species for table
str_split(adj_stats$name, "_")
adj_stats %>% separate(name, c(NA, "genus", "species", NA),sep = "_", remove = F) ->adj_stats
adj_stats$genus <- substr(adj_stats$genus, 0, 1)
adj_stats$binomial <- paste(adj_stats$genus, adj_stats$species, sep="_")
image_paths <- str_c("/Users/shawn/Dropbox/ICB_Chaet_paper_2019/images/curated_images/", adj_stats$name, ".png")
adj_stats$image_paths <- image_paths
knitter_path <- sprintf('![](%s){width=25%%}', image_paths)
adj_stats$knitter_path <-  knitter_path
select(adj_stats, knitter_path, species,m) %>% arrange(desc(m)) -> m_sorted
View(adj_stats)
View(adj_stats)
names(adj_stats)[2] <- "Full.Genus"
names(adj_stats)[5] <- "ID"
select(adj_stats, knitter_path, species,m) %>% arrange(desc(m)) -> m_sorted
select(adj_stats, knitter_path, species,A) %>% arrange(desc(A)) -> A_sorted
select(adj_stats, knitter_path, species,Jc) %>% arrange(desc(Jc)) -> Jc_sorted
select(adj_stats, knitter_path, species,Jt) %>% arrange(desc(Jt)) -> Jt_sorted
select(adj_stats, knitter_path, species,m_dS) %>% arrange(desc(m_dS)) -> mS_sorted
select(adj_stats, knitter_path, species, m_dL) %>% arrange(desc(m_dL)) -> mL_sorted
m_sorted
select(adj_stats, knitter_path, binomial,m) %>% arrange(desc(m)) -> m_sorted
m_sorted
select(adj_stats, knitter_path, binomial,m) %>% arrange(desc(m)) -> m_sorted
select(adj_stats, knitter_path, binomial,A) %>% arrange(desc(A)) -> A_sorted
select(adj_stats, knitter_path, binomial,Jc) %>% arrange(desc(Jc)) -> Jc_sorted
select(adj_stats, knitter_path, binomial,Jt) %>% arrange(desc(Jt)) -> Jt_sorted
select(adj_stats, knitter_path, binomial,m_dS) %>% arrange(desc(m_dS)) -> mS_sorted
select(adj_stats, knitter_path, binomial, m_dL) %>% arrange(desc(m_dL)) -> mL_sorted
bind_cols(m_sorted, A_sorted, Jc_sorted, Jt_sorted) -> sorted_patterns
sorted_patterns
View(sorted_patterns)
View(sorted_patterns)
cols_to_plot <- list(m_sorted, A_sorted, Jc_sorted, Jt_sorted, mS_sorted, mL_sorted)
cols_to_plot
View(cols_to_plot)
View(cols_to_plot)
knitr::kable(cols_to_plot[1])
knitter_path
install.packages("magrittr")
install.packages("magrittr")
install.packages("magrittr")
install.packages("flextable")
knitr::opts_chunk$set(echo = TRUE)
library(stargazer)
library(stringr)
library(tidyverse)
library(dplyr)
library(flextable)
library(magrittr)
#test table
cols_to_plot[1] %>% autofit() %>%
width(j=~knitter_path, width = 1) %>% width(j=~binomial, width = 1) %>% width(j=~m, width = 1)
library(kableExtra)
library(flextable)
library(magrittr)
library(kableExtra)
#test table
cols_to_plot[1] %>% autofit() %>%
width(j=~knitter_path, width = 1) %>% width(j=~binomial, width = 1) %>% width(j=~m, width = 1)
knitr::kable(cols_to_plot[1], "html") %>%
kable_styling(full_width = F)
knitr::opts_chunk$set(echo = TRUE)
library(stargazer)
library(stringr)
library(tidyverse)
library(dplyr)
library(flextable)
library(magrittr)
library(kableExtra)
knitr::kable(cols_to_plot[1], format = "html", tabble.attr = "style='width:30%;'")
library(stargazer)
library(stringr)
library(tidyverse)
library(dplyr)
library(flextable)
library(magrittr)
library(kableExtra)
setwd("~/Dropbox/ICB_Chaet_paper_2019")
#read in adjacency statistics
adj_stats_path <- "/Users/shawn/Dropbox/ICB_Chaet_paper_2019/appendix_tables/fish_adjacency_stats_table_roa-mod.csv"
adj_stats<- read.table(adj_stats_path, sep = ",", header=T, as.is=F)
adj_stats$name <- as.character(adj_stats$name)
#need to create a new column that is just the genus_species for table
str_split(adj_stats$name, "_")
adj_stats %>% separate(name, c(NA, "genus", "species", NA),sep = "_", remove = F) ->adj_stats
adj_stats$genus <- substr(adj_stats$genus, 0, 1)
adj_stats$binomial <- paste(adj_stats$genus, adj_stats$species, sep="_")
image_paths <- str_c("/Users/shawn/Dropbox/ICB_Chaet_paper_2019/images/curated_images/", adj_stats$name, ".png")
adj_stats$image_paths <- image_paths
knitter_path <- sprintf('![](%s){width=25%%}', image_paths)
adj_stats$knitter_path <-  knitter_path
names(adj_stats)[2] <- "Full.Genus"
names(adj_stats)[5] <- "ID"
select(adj_stats, knitter_path, binomial,m) %>% arrange(desc(m)) -> m_sorted
select(adj_stats, knitter_path, binomial,A) %>% arrange(desc(A)) -> A_sorted
select(adj_stats, knitter_path, binomial,Jc) %>% arrange(desc(Jc)) -> Jc_sorted
select(adj_stats, knitter_path, binomial,Jt) %>% arrange(desc(Jt)) -> Jt_sorted
select(adj_stats, knitter_path, binomial,m_dS) %>% arrange(desc(m_dS)) -> mS_sorted
select(adj_stats, knitter_path, binomial, m_dL) %>% arrange(desc(m_dL)) -> mL_sorted
bind_cols(m_sorted, A_sorted, Jc_sorted, Jt_sorted) -> sorted_patterns
cols_to_plot <- list(m_sorted, A_sorted, Jc_sorted, Jt_sorted, mS_sorted, mL_sorted)
knitr::kable(cols_to_plot[1], format = "html", tabble.attr = "style='width:30%;'")
install.packages("cars")
install.packages("car")
?.car
??car
source('~/Developer/EEB-C174-Labs/Lab3/lab_three_class.R', echo=TRUE)
source('~/Developer/EEB-C174-Labs/Lab3/lab_three_class.R', echo=TRUE)
rm(list=ls())
#imports
library(ape)
library(phytools)
library(car)
#### Simulating Browninan Motion ####
# Setting up our parameters
sig2 <- 0.01 #sigma^2
n_steps <- 1:100 #number of steps (time)
# Fill a vector with a bunch of small steps
vec <- numeric(100) #going to fill this with each time step
for (i in n_steps)
{
small_step <- rnorm(n = 1, sd = sqrt(sig2))
vec[i + 1] <- vec[i] + small_step
}
plot(n_steps, vec[1:100], type = "1", ylim = c(-2, 2), ylab = "x", xlab = "t")
{
small_step <- rnorm(n = 1, sd = sqrt(sig2))
vec[i + 1] <- vec[i] + small_step
}
plot(n_steps, vec[1:100], type = "1", ylim = c(-2, 2), ylab = "x", xlab = "t")
source('~/Developer/EEB-C174-Labs/Lab3/lab_three_class.R', echo=TRUE)
plot(n_steps, vec[1:100], type = "1", ylim = c(-2, 2), ylab = "x", xlab = "t")
source('~/OneDrive/UCLA Undergraduate Degree/Year 4 (2018-2019)/(Y4,Q3) Spring Quarter 2019/EE BIOL C174/Week 6/lab_six_homework_schwartz.R')
source('~/Developer/EEB-C174-Labs/Lab6/lab_six_homework_schwartz.R', echo=TRUE)
plot(labrid_tree)
library(apTreeshape)
source('~/Developer/EEB-C174-Labs/Lab6/lab_six_homework_schwartz.R', echo=TRUE)
#run colless test
colless.test(tree = labrid_treeshape, model = "yule", alternative = "greater", n.mc = 1000)
## run colless test ##
labrid_colless_test <- colless.test(tree = labrid_treeshape, model = "yule", alternative = "less", n.mc = 1000)
labrid_colless_test
## gamma stat ##
makeTransparent <- function(someColor,alpha=10)
{
newColor <- col2rgb(someColor)
apply(newColor,2,function(curcoldata)
{
rgb(red=curcoldata[1],
green=curcoldata[2],
blue=curcoldata[3],
alpha=alpha,
maxColorValue=255)
})
}
ltt.plot(labrid_tree, log = "y")
plotTree(labrid_tree, color = makeTransparent("blue", alpha = 50), ftype = "off", add = TRUE, mar = par()$mar)
# sample 50% of the tree
incomplete_labrid_tree <- drop.random(phy = labrid_tree, n = 50)
ltt.plot(incomplete_labrid_tree, log = "y")
plotTree(incomplete_labrid_tree, color = makeTransparent("blue", alpha = 50), ftype = "off", add = TRUE, mar = par()$mar)
labrid_tree_gammastat <- gammaStat(labrid_tree)
incomplete_labrid_tree_gammastat <- gammaStat(incomplete_labrid_tree)
labrid_tree_gammastat
incomplete_labrid_tree_gammastat
length(labrid_tree$tip.label)
## Get the age of the clade by finding the branching time at the root.
age <- branching.times(labrid_tree)[1]
## Manually specify total richness
richness <- 600
labrid_birth <- (log(richness) - log(2)) / age
labrid_birth
num_simulations < 1000
gamma_null <- numeric(num_simulations)
num_simulations <- 1000
gamma_null <- numeric(num_simulations)
incomplete_labrid_tree
labrid_tree
(length(labrid_tree$tip.label))/2
# sample 50% of the tree
half_num <- (length(labrid_tree$tip.label))/2
half_num <- half_num + .5
half_num
length(labrid_tree$tip.label
)
arrows(x0 = labrid_tree_gammastat, y0 = 100, x1 = labrid_tree_gammastat, y1 = 0, col = "red", lwd = 2, xlab = "Null Gammas", main = "Incomplete Sampling")
## Get the age of the clade by finding the branching time at the root.
age <- branching.times(labrid_tree)[1]
## Manually specify total richness
richness <- 600
labrid_birth <- (log(richness) - log(2)) / age
labrid_birth
num_simulations <- 1000
gamma_null <- numeric(num_simulations)
# gamma_null will hold the simulated gamma values
# for the trees that have been pruned down
for (i in 1:num_simulations)
{
sim_labrid_tree <- sim.bdtree(b = labrid_birth, d = 0, stop = "taxa", n = richness)
prune <- drop.random(sim_labrid_tree, 136) #here we drop 136 species randomly from the tree (i.e., ~40%)
gamma_null[i] <- gammaStat(prune)
}
hist(gamma_null, xlim = c(-3.5, 3.5))
arrows(x0 = labrid_tree_gammastat, y0 = 100, x1 = labrid_tree_gammastat, y1 = 0, col = "red", lwd = 2, xlab = "Null Gammas", main = "Incomplete Sampling")
mean(gamma_null)
labrid_tree_gammastat
#which of the null values is smaller (more negative) than the data?
smallNull <- gamma_null <= labrid_tree_gammastat
smallNull
#which of the null values is smaller (more negative) than the data?
smallerNull <- gamma_null <= labrid_tree_gammastat
smallerNull
count <- sum(smallerNull)
count
mccr_pval <- (count + 1)/(num_simulations+1)
mccr_pval
## MEDUSA: Investigating Rate Shifts ##
#Question: Have different Labridae traits evolved at different rates?
run1 <- medusa(phy = labrid_tree)
run1
shift_nodes <- run1$model$split.at
shift_nodes
plot(run1, show.tip.labels = F)
extracted_clade_1 <- extract.clade(phy = labrid_tree, node = shift_nodes[1])
extracted_clade_2 <- extract.clade(phy = labrid_tree, node = shift_nodes[2])
extracted_clade_3 <- extract.clade(phy = labrid_tree, node = shift_nodes[3])
plot(extracted_clade_1, cex = 0.8)
plot(extracted_clade_1, cex = 0.4)
plot(extracted_clade_1, cex = 0.3)
plot(extracted_clade_2, cex = 0.3)
plot(extracted_clade_3, cex = 0.3)
axisPhylo()
R.version
labrid_tree
incomplete_labrid_tree
# sample 50% of the tree
half_num <- (length(labrid_tree$tip.label))/2
half_num <- half_num + .5
half_num
incomplete_labrid_tree <- drop.random(phy = labrid_tree, n = half_num)
incomplete_labrid_tree
run1
rm(list=ls())
#imports
library(phytools)
library(geiger)
library(ape)
library(apTreeshape)
cwd <- "~/Developer/EEB-C174-Labs/Lab6"
resources_path <- "resources/"
output_path <- "output/"
setwd(cwd)
labrid_tree <- read.tree(paste0(resources_path,"Labridae.tre"))
plot(labrid_tree)
plot(labrid_tree, type = "fan", show.tip.label = F)
plot(labrid_tree, cex = 0.3)
#### Diversification Methods ####
#Turn phylo into tree shape
labrid_treeshape <- as.treeshape(labrid_tree)
## run colless test ##
labrid_colless_test <- colless.test(tree = labrid_treeshape, model = "yule", alternative = "less", n.mc = 1000)
labrid_colless_test
## gamma stat ##
makeTransparent <- function(someColor,alpha=10)
{
newColor <- col2rgb(someColor)
apply(newColor,2,function(curcoldata)
{
rgb(red=curcoldata[1],
green=curcoldata[2],
blue=curcoldata[3],
alpha=alpha,
maxColorValue=255)
})
}
ltt.plot(labrid_tree, log = "y")
plotTree(labrid_tree, color = makeTransparent("blue", alpha = 50), ftype = "off", add = TRUE, mar = par()$mar)
# sample 50% of the tree
half_num <- (length(labrid_tree$tip.label))/2
half_num <- half_num + .5
half_num
incomplete_labrid_tree <- drop.random(phy = labrid_tree, n = half_num)
ltt.plot(incomplete_labrid_tree, log = "y")
plotTree(incomplete_labrid_tree, color = makeTransparent("blue", alpha = 50), ftype = "off", add = TRUE, mar = par()$mar)
labrid_tree_gammastat <- gammaStat(labrid_tree)
incomplete_labrid_tree_gammastat <- gammaStat(incomplete_labrid_tree)
labrid_tree_gammastat
incomplete_labrid_tree_gammastat
## Get the age of the clade by finding the branching time at the root.
age <- branching.times(labrid_tree)[1]
## Manually specify total richness
richness <- 600
labrid_birth <- (log(richness) - log(2)) / age
labrid_birth
num_simulations <- 1000
gamma_null <- numeric(num_simulations)
# gamma_null will hold the simulated gamma values
# for the trees that have been pruned down
for (i in 1:num_simulations)
{
sim_labrid_tree <- sim.bdtree(b = labrid_birth, d = 0, stop = "taxa", n = richness)
prune <- drop.random(sim_labrid_tree, 136) #here we drop 136 species randomly from the tree (i.e., ~40%)
gamma_null[i] <- gammaStat(prune)
}
hist(gamma_null, xlim = c(-3.5, 3.5))
arrows(x0 = labrid_tree_gammastat, y0 = 100, x1 = labrid_tree_gammastat, y1 = 0, col = "red", lwd = 2, xlab = "Null Gammas", main = "Incomplete Sampling")
mean(gamma_null)
sd(gamma_null)
labrid_tree_gammastat
incomplete_labrid_tree_gammastat
## Get the age of the clade by finding the branching time at the root.
age <- branching.times(labrid_tree)[1]
## Manually specify total richness
richness <- 600
labrid_birth <- (log(richness) - log(2)) / age
labrid_birth
num_simulations <- 1000
gamma_null <- numeric(num_simulations)
# gamma_null will hold the simulated gamma values
# for the trees that have been pruned down
for (i in 1:num_simulations)
#which of the null values is smaller (more negative) than the data?
smallerNull <- gamma_null <= labrid_tree_gammastat
smallerNull
count <- sum(smallerNull)
count
mccr_pval <- (count + 1)/(num_simulations+1)
## Get the age of the clade by finding the branching time at the root.
age <- branching.times(labrid_tree)[1]
## Manually specify total richness
richness <- 600
labrid_birth <- (log(richness) - log(2)) / age
labrid_birth
num_simulations <- 1000
gamma_null <- numeric(num_simulations)
# gamma_null will hold the simulated gamma values
# for the trees that have been pruned down
for (i in 1:num_simulations)
{
sim_labrid_tree <- sim.bdtree(b = labrid_birth, d = 0, stop = "taxa", n = richness)
prune <- drop.random(sim_labrid_tree, 136) #here we drop 136 species randomly from the tree (i.e., ~40%)
gamma_null[i] <- gammaStat(prune)
}
hist(gamma_null, xlim = c(-3.5, 3.5))
arrows(x0 = labrid_tree_gammastat, y0 = 100, x1 = labrid_tree_gammastat, y1 = 0, col = "red", lwd = 2, xlab = "Null Gammas", main = "Incomplete Sampling")
mean(gamma_null)
sd(gamma_null)
#which of the null values is smaller (more negative) than the data?
smallerNull <- gamma_null <= labrid_tree_gammastat
smallerNull
count <- sum(smallerNull)
count
mccr_pval <- (count + 1)/(num_simulations+1)
mccr_pval
## MEDUSA: Investigating Rate Shifts ##
#Question: Have different Labridae traits evolved at different rates?
run1 <- medusa(phy = labrid_tree)
run1
shift_nodes <- run1$model$split.at
shift_nodes
plot(run1, show.tip.labels = F)
plot(run1, show.tip.labels = FALSE)
plot(run1, show.tip.label = FALSE)
extracted_clade_1 <- extract.clade(phy = labrid_tree, node = shift_nodes[1])
extracted_clade_2 <- extract.clade(phy = labrid_tree, node = shift_nodes[2])
extracted_clade_3 <- extract.clade(phy = labrid_tree, node = shift_nodes[3])
plot(extracted_clade_1, cex = 0.3)
axisPhylo()
plot(extracted_clade_2, cex = 0.3)
axisPhylo()
plot(extracted_clade_3, cex = 0.3)
axisPhylo()
run1
plot(extracted_clade_1, cex = 0.2)
axisPhylo()
plot(extracted_clade_2, cex = 0.6)
axisPhylo()
